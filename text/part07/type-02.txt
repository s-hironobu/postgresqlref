%FILE internal/type-02.html
%LASTMOD
%KEY pgsql-type02

%TITLE <a href="https://www.postgresql.org/docs/current/datatype-numeric.html" target="_blank" rel="noopener noreferrer">数値データ型</a>

[<数値データ型一覧>]

<table><tr bgcolor="#cccccc">
<th>データ型名</th>		<th>格納サイズ</th>	<th>説明</th>			<th>範囲</th>
</tr><tr>
<td>smallint</td>	<td>2バイト</td>	<td>固定精度整数</td>	<td>-32768 〜 +32767</td>
</tr><tr>
<td>integer</td>	<td>4バイト</td>	<td>固定精度整数</td>	<td>-2147483648 〜 +2147483647 </td>
</tr><tr>
<td>bigint</td>	<td>8バイト</td>	<td>固定精度整数</td>	<td>-9223372036854775808 〜 +9223372036854775807 </td>
</tr><tr>
<td>real</td>	<td>4バイト</td>	<td>浮動小数(有効数値6桁)</td>	<td>-1E + 37〜 +1E + 37</td>
</tr><tr>
<td>double precision</td>	<td>8バイト</td>	<td>浮動小数(有効数値15桁)</td>	<td>-1E + 308〜 1E + 308</td>
</tr><tr>
<td>numeric, decimal</td>	<td>可変長</td>	<td>ユーザが精度指定できるデータ型。精度無制限</td>	<td></td>
</tr><tr>
<td>serial</td>	<td>4バイト</td>	<td>一意な整数値を割り当てるときに使う</td>	<td>1 〜 +2147483647</td>
</tr><tr>
<td>serial4</td>	<td>4バイト</td>	<td>serialの別名</td>	<td>1 〜 +2147483647</td>
</tr><tr>
<td>smallserial</td>	<td>2バイト</td>	<td>2バイト長のシリアル値</td>	<td>1 〜 +32767</td>
</tr><tr>
<td>bigserial</td>	<td>8バイト</td>	<td>8バイト長のシリアル値</td>	<td>1 〜 +9223372036854775807</td>
</tr><tr>
<td>serial8</td>	<td>8バイト</td>	<td>bigserialの別名</td>	<td>1 〜 +9223372036854775807</td>
</tr></table>


%CHAPTER 解説

<p>
・整数：smallint, integer, bigint
<br>
整数を表現する数値データ型にはsmallint型、integer型、bigint型の3種類あり、それぞれ表現範囲が異なります。
</p>

<p>
・浮動小数：real, double precision
<br>
real型は6桁の精度を持ち、少なくとも-1E+37 から+1E+37の範囲の数値を表現できます。
<br>
double precision(倍精度浮動小数)型は15桁の精度を持ち、
少なくとも −1E+308 から+1E+308の範囲の数値を表現できます。
</p>


<p>
・numeric型、decimal型
<br>
numeric 型、decimal型はユーザが任意の精度を指定できる数値データ型です(decimal 型とnumeric型は等価)。
書式は以下のとおりです。
</p>

<br>

<pre>
[<書式>]

	numeric(precision, scale)
	numeric(precision)

	decimal(precision, scale)
	decimal(precision)
</pre>
<br>

<table><tr bgcolor="#cccccc">
<th>引数</th>	<th>説明</th>
</tr><tr>
<td>precision</td>	<td>精度。数字全体の有効桁数のこと。正の値のみ設定可能</td>
</tr><tr>
<td>scale</td>	<td>位取り。0もしくは正の値のみ設定可能。整数値は位取り0 </td>
</tr></table>

<br>

<p>
例えば、'1234.56'という数値の精度と位取りは以下のとおりです。
</p>

<pre>
'1234.56' => 精度6, 位取り2
</pre>
<br>

<p>
宣言したカラムの精度や位取りよりも大きな値を設定すると、データベースシステムが値を丸めます。
</p>

<p>
・serial型, bigserial型
<br>
serial型を指定すると重複しない4バイト長の整数を順に割り当てます。
bigserial型は8バイト長の値を割り当てます。
</p>

<p>
serial型やbigserial型のデータは、PostgreSQL内部ではシーケンスとして処理します。
よって、serial型のデータを使う代わりにシーケンスを定義しても同等の効果が得られます。
<br>
なお、serial4はserialの別名、serial8はbigserialの別名です。
</p>


<p>
・GENERATED { ALWAYS | BY DEFAULT } AS IDENTITY [ ( sequence_options ) ]
<br>
CREATE TABLE実行時、GENERATED AS IDENTITY句で自動的にシーケンスを設定できる。
</p>

<br>

<pre>
postgres=# CREATE TABLE a1 (id int, seq bigint GENERATED ALWAYS AS IDENTITY);
CREATE TABLE
postgres=# \d+ a1
                                                      Table "public.a1"
 Column |  Type   | Collation | Nullable |           Default            | Storage | Compression | Stats target | Description
--------+---------+-----------+----------+------------------------------+---------+-------------+--------------+-------------
 id     | integer |           |          |                              | plain   |             |              |
 seq    | bigint  |           | not null | generated always as identity | plain   |             |              |
Access method: heap

postgres=# \ds
            List of relations
 Schema |    Name    |   Type   | Owner
--------+------------+----------+--------
 public | a1_seq_seq | sequence | ubuntu
(1 row)

postgres=# INSERT INTO a1 VALUES(1);
INSERT 0 1
postgres=# INSERT INTO a1 VALUES(2);
INSERT 0 1
postgres=# SELECT * FROM a1;
 id | seq
----+-----
  1 |   1
  2 |   2
(2 rows)
</pre>
<br>

%CHAPTER 実行例

<p>
・double precision型
</p>

<pre>
sampledb=# SELECT double precision '123456789012345',
sampledb-#        double precision '12345678901234.56789',
sampledb-#        double precision '12345678901234567890';
     float8      |      float8      |        float8
-----------------+------------------+----------------------
 123456789012345 | 12345678901234.6 | 1.23456789012346e+19
(1 row)
</pre>
<br>

<p>
・numeric型
<br>
numeric型の例。設定した精度にあわせて値が丸められています。
</p>

<pre>
sampledb=# SELECT numeric(6, 2) '1234.56789';
numeric
---------
1234.57
(1 row)
</pre>
<br>

<p>
・serial型
<br>
カラムidにserial型を使ったテーブルmember_listを定義します。
</p>

<pre>
sampledb=# CREATE TABLE member_list (id serial4, name text);
CREATE TABLE

sampledb=# \ds member_list*
                 List of relations
 Schema |        Name        |   Type   |  Owner
--------+--------------------+----------+----------
 public | member_list_id_seq | sequence | postgres
(1 row)
</pre>
<br>

<p>
いくつかデータをINSERTした結果を示します。
</p>

<pre>
sampledb=# INSERT INTO member_list (name)
sampledb-#  VALUES ('Alice'), ('Bobby'), ('Candy');
INSERT 0 3
sampledb=# SELECT * FROM member_list;
 id | name
----+-------
  1 | Alice
  2 | Bobby
  3 | Candy
(3 rows)
</pre>
<br>
