%FILE internal/func-03.html
%LASTMOD
%KEY pgsql-func03

%TITLE <a href="https://www.postgresql.org/docs/current/functions-aggregate.html" target="_blank" rel="noopener noreferrer">集約関数/統計関数</a>

[<集約関数>]

<table><tr bgcolor="#cccccc">
<th>集約関数</th>	<th>引数の型</th>		<th>説明</th>	<th>Partial Mode</th>
</tr><tr>

<td>any_value (anyelement)</td>	<td>入力と同じ</td>	<td>任意の値を返す。バージョン16から。</td>	<td>Yes</td>
</tr><tr>

<td>array_agg (anynoarray)</td>	<td>配列型</td>		<td>すべての入力値を配列にして返す。実行例参照。</td>	<td>No</td>
</tr><tr>

<td>array_agg (anyarray)</td>	<td>配列型</td>		<td>全ての(配列型の)入力値を要素とする配列を返す。実行例参照。</td>	<td>No</td>
</tr><tr>

<td>avg (expression)</td>	<td>数値型</td>		<td>すべての入力値の平均</td>	<td>Yes</td>
</tr><tr>

<td>bit_and(smallint/int/bigint/bit)</td>	<td>smallint/int/bigint/bit</td>		<td>すべての入力値のビット毎のAND</td>	<td>Yes</td>
</tr><tr>

<td>bit_or(smallint/int/bigint/bit)</td>	<td>smallint/int/bigint/bit</td>		<td>すべての入力値のビット毎のOR</td>	<td>Yes</td>
</tr><tr>

<td>bit_xor(smallint/int,bigint/bit)</td>	<td>smallint/int/bigint/bit</td>		<td>すべての入力値のビット毎のXOR</td>	<td>Yes</td>
</tr><tr>

<td>count (*)</td>	<td>-	</td>		<td>入力値の数</td>	<td>Yes</td>
</tr><tr>
<td>count (expression)</td>	<td>全ての型</td>	<td>expressionの値がNULLでない入力値の数</td>	<td>Yes</td>
</tr><tr>
<td>max (expression)</td>	<td>数値型,string,日付時刻型</td>	<td>すべての入力値のexpressionの最大値</td>	<td>Yes</td>
</tr><tr>
<td>min (expression)</td>	<td>数値型,string,日付時刻型</td>	<td>すべての入力値のexpressionの最小値</td>	<td>Yes</td>

</tr><tr>

<td>range_agg (anyrange)</td>	<td>RANGE型</td>		<td>全てのRange型入力値の和を求めて返す。実行例参照。</td>	<td>No</td>
</tr><tr>

<td>range_intersect_agg (anyrange)</td>	<td>RANGE型</td>		<td>すべてのRange型入力値の共通部分を求めて返す。実行例参照。</td>	<td>No</td>

</tr><tr>
<td>stddev (expression)</td>	<td>数値型</td>	<td>入力値の標準偏差</td>	<td>Yes</td>
</tr><tr>
<td>sum (expression)</td>	<td>数値型</td>	<td>すべての入力値のexpressionの和</td>	<td>Yes</td>
</tr></table>

<br>

<p>
※
string_agg()、json_agg(), jsonb_agg(), json_object_agg(), jsonb_object_agg(),xmlagg()は省略する。
</p>


<br>

[<統計関数>]

<table><tr bgcolor="#cccccc">
<th>統計関数</th>	<th>引数の型</th>			<th>返り値の型</th>		<th>説明</th>	<th>Partial Mode</th>
</tr><tr>
<td>corr(Y, X)</td>		<td>double precision型	</td>		<td>double precision型</td>		<td>相関係数</td>	<td>Yes</td>
</tr><tr>
<td>covar_pop(Y, X)</td>		<td>double precision型	</td>		<td>double precision型</td>		<td>母共分散</td>	<td>Yes</td>
</tr><tr>
<td>covar_samp(Y, X)</td>		<td>double precision型</td>		<td>double precision型</td>		<td>標本共分散</td>	<td>Yes</td>
</tr><tr>
<td>regr_avgx(Y, X)</td>		<td>double precision型	</td>		<td>double precision型</td>		<td>独立変数の平均値 (sum(X)/N)</td>	<td>Yes</td>
</tr><tr>
<td>regr_avgy(Y, X)</td>		<td>double precision型	</td>		<td>double precision型</td>		<td>依存変数の平均値 (sum(Y)/N)</td>	<td>Yes</td>
</tr><tr>
<td>regr_count(Y, X)</td>		<td>double precision型	</td>		<td>bigint</td>		<td>両式が非NULLとなる入力行の個数</td>	<td>Yes</td>
</tr><tr>
<td>regr_intercept(Y, X)</td>		<td>double precision型	</td>		<td>double precision型</td>		<td>(X, Y)の組み合わせで決まる、線型方程式に対する最小二乗法のY切片</td>	<td>Yes</td>
</tr><tr>
<td>regr_r2(Y, X)</td>		<td> double precision型	</td>		<td>double precision型</td>		<td>相関係数2乗値</td>	<td>Yes</td>
</tr><tr>
<td>regr_slope(Y, X) </td>		<td>double precision型	</td>		<td>double precision型</td>		<td>(X, Y)の組み合わせで決まる、最小二乗法に合う線型方程式の傾き</td>	<td>Yes</td>
</tr><tr>
<td>regr_sxx(Y, X)</td>		<td> double precision型	</td>		<td>double precision型	</td>		<td>sum(X^2) - sum(X)^2/N （依存変数の"二乗和"）</td>	<td>Yes</td>
</tr><tr>
<td>regr_sxy(Y, X)</td>		<td> double precision型	</td>		<td>double precision型</td>		<td>sum(X*Y) - sum(X) * sum(Y)/N （依存変数×独立変数の"和"）</td>	<td>Yes</td>
</tr><tr>
<td>regr_syy(Y, X)</td>		<td> double precision型	</td>		<td>double precision型</td>		<td>sum(Y^2) - sum(Y)^2/N （独立変数の"二乗和"）</td>	<td>Yes</td>
</tr><tr>
<td>stddev_pop(expression)</td>		<td>smallint,int,bigint,real,double precision,numeric  </td>		<td>浮動小数点型引数はdouble precision,それ以外はnumeric </td>		<td> 入力値に対する母標準偏差</td>	<td>Yes</td>
</tr><tr>
<td>stddev_samp(expression)</td>		<td>smallint,int,bigint,real,double precision,numeric  </td>		<td>浮動小数点型引数はdouble precision,それ以外はnumeric </td>		<td>入力値に対するサンプル標準偏差</td>	<td>Yes</td>
</tr><tr>
<td>variance (expression)</td>	<td>数値型</td>	<td>入力値の分散</td>	<td>Yes</td>
</tr><tr>
<td>var_pop(expression)	</td>		<td>smallint,int,bigint,real,double precision,numeric  </td>		<td>浮動小数点型引数はdouble precision,それ以外はnumeric </td>		<td>入力値に対する母分散（母標準偏差の二乗）</td>	<td>Yes</td>
</tr><tr>
<td>var_samp(expression)</td>		<td>smallint、int、 bigint、real、double precision、numeric</td>		<td>浮動小数点型引数はdouble precision,それ以外はnumeric </td>		<td>入力値に対するサンプル分散（サンプル標準偏差の二乗）</td>	<td>Yes</td>
</tr></table>

<br>

%CHAPTER 解説

<p>
(関数count()を除いた)すべての集約関数は、レコードが選択されなかった場合にNULLを返します。"0(零)"でないので注意してください。
</p>

%CHAPTER 実行例

<p>
・array_agg
<br>
以下に実行例を示す。
</p>

<pre>
sampledb=# SELECT * FROM array_test;
 id | int_array
----+-----------
  1 | {1}
  2 | {2}
  3 | {3}
  4 | {4,5}
(4 rows)

sampledb=# SELECT array_agg(id) FROM array_test;
 array_agg
-----------
 {1,2,3,4}
(1 row)

sampledb=# SELECT array_agg(int_array) FROM array_test WHERE id < 4;
   array_agg
---------------
 {{1},{2},{3}}
(1 row)

sampledb=# SELECT array_agg(int_array) FROM array_test;
ERROR:  cannot accumulate arrays of different dimensionality
</pre>
<br>

<p>
・range_agg, range_intersect_agg
<br>
以下に実行例を示す。
</p>

<pre>
sampledb=# \d range_test
               Table "public.range_test"
  Column   |   Type    | Collation | Nullable | Default
-----------+-----------+-----------+----------+---------
 id        | integer   |           |          |
 int_range | int8range |           |          |

sampledb=# SELECT * FROM range_test;
 id | int_range
----+-----------
  1 | [1,3)
  2 | [4,8)
  3 | [2,6)
  4 | [4,6)
(4 rows)

sampledb=# SELECT range_agg(int_range) FROM range_test;
 range_agg
-----------
 {[1,8)}
(1 row)

sampledb=# SELECT range_intersect_agg(int_range) FROM range_test WHERE id BETWEEN 3 AND 4;
 range_intersect_agg
---------------------
 [4,6)
(1 row)
</pre>
<br>
