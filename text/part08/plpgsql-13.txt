%FILE internal/plpgsql-13.html
%LASTMOD
%KEY pgsql-plpgsql13


%TITLE ループ処理 (複数行の問い合わせ結果を扱う) <a href="https://www.postgresql.org/docs/current/plpgsql-control-structures.html#PLPGSQL-RECORDS-ITERATING" target="_blank" rel="noopener noreferrer">FOR</a> / <a href="https://www.postgresql.org/docs/current/plpgsql-control-structures.html#PLPGSQL-FOREACH-ARRAY" target="_blank" rel="noopener noreferrer">FOREACH</a>


<pre>
[<書式>]


[ label ]
FOR target IN query LOOP
    statements
END LOOP [ label ];


[ label ]
FOR target IN EXECUTE text_expression [ USING expression [, ... ] ] LOOP
    statements
END LOOP [ label ];


[ label ]
FOREACH target [ SLICE number ] IN ARRAY expression LOOP
    statements
END LOOP [ label ];

</pre>

<br>

<table>
<caption>パラメータ</caption>
<tr bgcolor="#cccccc">
<th>パラメータ</th>	<th>説明</th>
</tr><tr>
<td>target</td>	<td>record変数かrow変数</td>
</tr><tr>
<td>query</td>	<td>SELECT文</td>
</tr><tr>
<td>text_expression</td>	<td>SELECT文を記述した文字列</td>
</tr><tr>
<td>statements</td>	<td>繰り返しするSQL文など</td>
</tr></table>

<br>


%CHAPTER 解説

%SECTION FOR IN LOOP, IN EXECUTE LOOP

<p>
FOR IN LOOP文またはFOR IN EXECUTE LOOP文で、複数行の問い合わせ結果を扱うことができます。
</p>

<p>
・FOR IN LOOP
<br>
レコード変数または行変数に、SELECT文の結果が順次代入され、1行ごとにループ内のstatementsが実行されます。
</p>

<p>
実行例で示す関数item_names()の書き換えをみてもわかるように、この形式を利用すると、非常に簡単に関数が記述できます。さらに、ループの廻る回数を<a href="./plpgsql-10.html">[<8-10>]</a>,を<a href="./plpgsql-11.html">[<8-11>]</a>,を<a href="./plpgsql-12.html">[<8-12>]</a>で定義した関数群と比較すれば、この形式が最も効率良く処理を行なうことがわかると思います。
</p>

<p>
1つだけ、
<u>「ループ変数は、テーブルの行と同じかrecord型の変数だけ」</u>
という制約があります。しかし、この制約が関数の実装に大きな困難をもたらすことはないでしょう。
</p>

%SECTION FOREACH

<p>
FOREACHは配列を使ってLOOPを回します。詳細は省略するので、PostgreSQLの<a href="https://www.postgresql.org/docs/current/plpgsql-control-structures.html#PLPGSQL-FOREACH-ARRAY" target="_blank" rel="noopener noreferrer">公式ドキュメント</a>をご覧ください。
</p>

%CHAPTER 実行例

%SECTION FOR IN LOOP

<p>
FOR IN LOOP構文を使って、テーブルitemlistの列nameを列挙する関数item_names()を定義します。
</p>

<pre>
CREATE FUNCTION item_names () RETURNS SETOF text AS
 $$
   DECLARE
     myname text;		/* 商品名を格納 */
     myrow  itemlist%ROWTYPE;
   BEGIN

     /* SELECT文の結果を順次、変数myrowに代入 */
     FOR myrow IN SELECT * FROM itemlist  LOOP

	 /* 変数myrowから、商品名を変数mynameに格納 */
	 myname := myrow.name;
	 RETURN NEXT myname;
     END LOOP;

     /* 保存された値を返し、関数を終了 */
     RETURN;
   END;
 $$
LANGUAGE PLpgSQL;
</pre>

<p>
関数item_names()はRETURN NEXT文を使っているので、"SELECT * FROM 関数()"形式で実行しなければなりません。
</p>

<pre>
sampledb=# SELECT * FROM item_names ();
 item_names
------------
 pen
 notebook
 eraser
(3 rows)
</pre>

<br>

%SECTION FOREACH

<p>
FOREACHの実行例を示します。
</p>

<pre>
postgres=# CREATE FUNCTION item_names(int[]) RETURNS SETOF text AS
 $$
    DECLARE
        x int;
        myname text;
    BEGIN
        FOREACH x IN ARRAY $1
        LOOP
            SELECT INTO myname name FROM itemlist WHERE  id = x;
            IF FOUND THEN
                RETURN NEXT myname;
            END IF;
        END LOOP;
        RETURN;
    END;
 $$
LANGUAGE PLpgSQL;
CREATE FUNCTION

postgres=# select * from item_names(ARRAY[1,2,100]);
 item_names
------------
 aaa
 bbb
 ccc
(3 rows)
</pre>

<br>
