%FILE internal/plpgsql-03.html
%LASTMOD
%KEY pgsql-plpgsql03

%TITLE <a href="https://www.postgresql.org/docs/current/plpgsql-declarations.html" target="_blank" rel="noopener noreferrer">変数宣言と値の代入</a>

<pre>
[<書式>]

●変数宣言
・特定のデータ型の変数
	myvariable [ CONSTANT ] type [COLLATE collation_name] [ NOT NULL ] [ { DEFAULT | := } expression ];
	myvariable table.column%TYPE;

・テーブルのレコードと同じ変数
	myrow table%ROWTYPE;

・record型の変数
	myrecord RECORD;
</pre>

<br>

<table>
<caption>パラメータ</caption>
<tr bgcolor="#cccccc">
<th>パラメータ</th>	<th>説明</th>
</tr><tr>
<td>myvariable</td>	<td>変数名</td>
</tr><tr>
<td>type</td>	<td>変数の型</td>
</tr><tr>
<td>expression</td>	<td>デフォルト値</td>
</tr><tr>
<td>table</td>	<td>テーブル名</td>
</tr><tr>
<td>table.column</td>	<td>テーブル(table)の列名</td>
</tr></table>

<br>


<table>
<caption>オプション</caption>
<tr bgcolor="#cccccc">
<th>オプション</th>	<th>説明</th>
</tr><tr>
<td>CONSTANT</td>	<td>定数として扱う</td>
</tr><tr>
<td>NOT NULL</td>	<td>NULLを設定できない</td>
</tr></table>

<br>

<table>
<caption>表記(notation)</caption>
<tr bgcolor="#cccccc">
<th>表記(notation)</th>	<th>説明</th>
</tr><tr>
<td>%TYPE</td>	<td>指定したテーブルの列と同じデータ型の変数を宣言</td>
</tr><tr>
<td>%ROWTYPE</td>	<td>指定したテーブルの行と同じ構造の変数を宣言</td>
</tr></table>

<br>

<table>
<caption>宣言</caption>
<tr bgcolor="#cccccc">
<th>宣言</th>	<th>説明</th>
</tr><tr>
<td>myrecord RECORD</td>	<td>record型(事前に特定の型情報を持たない)の変数myrecordの宣言</td>
</tr><tr>
<td>myalias ALIAS FOR $n</td>	<td>関数に渡した(n番目の)引数$nに、別名myaliasをつける</td>
</tr></table>

<br>


%CHAPTER 解説

<p>
関数定義で使用するすべての変数は、変数宣言部分で事前に宣言しなければなりません。
唯一の例外はFORループのループ変数です([<8-14>]参照)。
これは自動的に整数型変数として宣言されます。
</pre>
<br>

<p>
・値の代入
<br>
変数に値を代入するには、代入演算子':='を使います。代入は次のように行います。
</p>


[<変数への代入例>]
<pre>
price := 20;
total := price * 12;
GNU := 'GNU is Not Unix';
</pre>
<br>

<p>
・変数
<br>
ストアドプロシージャでは、任意のデータ型の変数を定義できます。
</p>

<p>
・DEFAULT
<br>
DEFAULT句を使って初期値を指定できます。DEFAULT句を指定しない場合、変数はNULLに初期化されます。
</p>

<p>
・定数
<br>
変数の定義時にCONSTANTを指定すると、その値は定数として扱われます(その変数への代入は禁止されます)。
</p>

<p>
・%TYPE表記
<br>
%TYPE表記を使って、指定したテーブルの列と同じデータ型の変数を宣言できます。
</p>

<p>
・%ROWTYPE表記
<br>
%ROWTYPE表記を使って、指定テーブルの行と同じ構造を持つ変数を宣言できます。
</p>

<p>
・RECORD：record変数
<br>
record変数はプレースホルダで、事前に定義されたデータ型を持ちません。
代入を行うたびに値とデータ型を変更できます。
値を代入する前にレコード変数にアクセスすると、実行時エラーとなります。
</p>

<p>
・引数、引数の別名
<br>
関数に渡した引数には、内部で$1, $2, ... という識別子が付きます。
ALIAS句を使い、引数$nに別名を定義できます。
<br>
バージョン8.0からは、関数の引数部分に直接、変数名を記述できるので、ALIAS句による変数定義は不要となりました。
</p>


%CHAPTER 変数宣言例

<p>
・変数宣言
<br>
通常のデータ型の変数宣言の例を、以下に示します。
</p>

<pre>
user_id INTEGER;	← INTEGER型の変数user_idを定義
quantity NUMERIC(5);	← NUMERIC型の変数guantityを定義
url TEXT;		← TEXT型の変数urlを定義
</pre>
<br>

<p>
・%ROWTYPE、%TYPEの利用
<br>
関数get_customer_data()は、テーブルcustomerlistの列idと引数idxが一致する行を表示します。
<br>
関数get_customer_name()は、テーブルcustomerlistの列idと引数idxが一致する行の列nameの値を表示します。
</p>

<pre>
CREATE FUNCTION get_customer_data (idx int) RETURNS customerlist AS
$$
  DECLARE
	customer_data customerlist%ROWTYPE;
  BEGIN
	SELECT * INTO customer_data FROM customerlist WHERE id = idx;
	RETURN customer_data;
  END;
$$
LANGUAGE PLpgSQL;

CREATE FUNCTION get_customer_name (idx int) RETURNS text AS
$$
  DECLARE
	customer_name customerlist.name%TYPE;
  BEGIN
	SELECT name INTO customer_name FROM customerlist WHERE id = idx;
	RETURN customer_name;
  END;
$$
LANGUAGE PLpgSQL;
</pre>
<br>

<p>
関数get_customer_data()とget_customer_name()の実行例を示します。
</p>

<pre>
sampledb=# SELECT * FROM get_customer_data(1);
 id |     name     | companycode
----+--------------+-------------
  1 | デューク東郷 |           1
(1 row)

sampledb=# SELECT get_customer_name(1);
 get_customer_name
-------------------
 デューク東郷
(1 row)
</pre>
<br>

<p>
・record変数の利用
<br>
上で定義した関数get_customer_name()を、record変数を使って書き換えます。
</p>

<pre>
CREATE FUNCTION get_customer_name (idx int) RETURNS text AS
 $$
   DECLARE
         select_data RECORD;
   BEGIN
         SELECT * INTO select_data FROM customerlist WHERE id = idx;
         RETURN select_data.name;
   END;
 $$
LANGUAGE PLpgSQL;
</pre>
<br>

<p>
ここで定義した関数get_customer_name()の実行例を示します。
</p>

<pre>
sampledb=#  SELECT get_customer_name(1);
 get_customer_name
-------------------
 デューク東郷
(1 row)
</pre>
<br>

<p>
・デフォルト値を指定
<br>
変数quantityにデフォルト値32を設定します。
</p>

<pre>
quantity INTEGER DEFAULT 32;
</pre>
<br>

<p>
・定数宣言
<br>
'lucky_number'を定数として定義します。
</p>

<pre>
lucky_number CONSTANT INTEGER := 7;
</pre>
<br>
