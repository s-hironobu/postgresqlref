%FILE internal/param-04.html
%LASTMOD
%KEY pgsql-param04

%TITLE <a href="https://www.postgresql.org/docs/current/runtime-config-resource.html" target="_blank" rel="noopener noreferrer">資源の消費		RESOURCE USAGE</a>


<table border=1>
<caption>[<設定項目一覧>]</caption>
<tr bgcolor="#cccccc">
<th><sup>変更<br>可能性</sup></th> <th>設定項目</th>	<th>パラメータ<br>[デフォルト]</th>		<th>説明</th>
</tr><tr bgcolor="#eeeeee">
<th colspan=4 align=left>Memory</th>
</tr><tr>
<td>×	</td><td>shared_buffers</td>	<td>整数 [128M]</td>	<td>共有バッファサイズ。最低限32M以上、かつ(2*max_connections*8Kbyte)以上。単位は[byte]。</td>


</tr><tr>
<td>×</td>	<td>huge_pages</td>	<td>try/on/off [try]</td>	<td>shared memoryでhuge pageを要求するか否か</td>

</tr><tr>
<td>×</td>	<td>huge_page_size</td>	<td>整数 [0]</td>	<td>huge pageのサイズ。0の場合、OSのデフォルト</td>


</tr><tr>
<td>◎</td>	<td>temp_buffers	</td>	<td>整数[8M]	</td>	<td>(セッション毎の)一時テーブルを確保するローカルバッファのサイズ。単位は[byte]</td>
</tr><tr>
<td>×	</td>	<td>max_prepared_transactions</td>	<td>整数[0]</td>	<td>2相コミットを同時に保持できる最大数。0なら2相コミットは無効。</td>
</tr><tr>
<td>◎	</td>	<td>work_mem	</td>	<td>整数[1M]	</td>	<td>内部ソートとハッシュで使うメモリ量。単位は[byte]。最低限64[Kbyte]以上</td>

</tr><tr>
<td>◎</td>	<td>hash_mem_multiplier</td>	<td>浮動少数 [2.0]</td>	<td>ハッシュ関連の操作を行う場合に使用できるメモリサイズ(hash_mem_multiplier * work_mem)を決める。</td>


</tr><tr>
<td>◎	</td>	<td>maintenance_work_mem</td>	<td>整数[16M]</td>	<td>VACUUM文実行時に使用するメモリの最大量。単位は[byte]。最低限１[Mbyte]以上</td>

</tr><tr>
<td>△</td>	<td>autovacuum_work_mem</td>	<td>整数 [-1]</td>	<td>各autovacuumワーカーが使用する最大メモリ量。-1の場合はmaintenance_work_memが使われる。単位はkB</td>

</tr><tr>
<td>◎</td>	<td>logical_decoding_work_mem</td>	<td>整数 [64MB]</td>	<td>デコードされた更新がローカルディスクに書かれる前にロジカルデコーディングが使用する最大のメモリ量。確保されるのはサーバ毎に1領域で、Postgresプロセス毎でないので、ロジカルデコードのためにwork_memを大きくするより効率的。</td>

</tr><tr>
<td>○</td>	<td>	max_stack_depth	</td>	<td>整数[2MB]	</td>	<td>サーバの実行スタックの最大深度を設定</td>

</tr><tr>
<td>×</td>	<td>shared_memory_type</td>	<td>mmap/sysv/windows</td>	<td>共有領域のための共有メモリ確保の方法・実装</td>

</tr><tr>
<td>×</td>	<td>dynamic_shared_memory_type</td>	<td>posix/mmap/sysv/windows</td>	<td>動的共有領域のための共有メモリ確保の方法・実装</td>

</tr><tr>
<td>×</td>	<td>min_dynamic_shared_memory</td>	<td>整数 [0]</td>	<td>パラレルクエリ用に獲得するメモリ量</td>


</tr><tr bgcolor="#eeeeee">
<th colspan=4 align=left>Disk</th>


</tr><tr>
<td>○</td>	<td>temp_file_limit</td>	<td>整数 [-1]</td>	<td>一時ファイルとして使用できるディスクの最大容量。単位はkB。-1の場合は無制限</td>


</tr><tr bgcolor="#eeeeee">
<th colspan=4 align=left>Kernel Resource Usage</th>


</tr><tr>
<td>×	  </td>	<td>  max_files_per_process	</td>	<td> 整数[1000]	</td>	<td>	各postgresプロセスがオープンできるファイルの最大数。最低限25以上。</td>

</tr><tr>
<td>×	 </td>	<td>   shared_preload_libraries	</td>	<td> 文字列[''(空文字)]	</td>	<td>PostgreSQLサーバ起動時にロードする共有ライブラリを記述する。複数ライブラリの場合は","で区切って列挙する。</td>


</tr><tr bgcolor="#eeeeee">
<th colspan=4 align=left>Cost-Based Vacuum Delay</th>

</tr><tr>
<td>◎</td>	<td>	vacuum_cost_delay		</td>	<td>整数(0-1000)[0ms]	</td>	<td>	VACUUM,ANALYZE処理を休止する時間。単位は[ミリ秒]。0なら遅延機能が無効</td>
</tr><tr>
<td>◎</td>	<td>	vacuum_cost_page_hit	</td>	<td>	整数(0-10000)[1]</td>	<td>	共有バッファのデータにキャッシュヒットした場合のコスト</td>
</tr><tr>
<td>◎</td>	<td>	vacuum_cost_page_miss	</td>	<td>	整数(0-10000)[10]	</td>	<td>共有バッファのデータにキャッシュミスした場合のコスト</td>
</tr><tr>
<td>◎</td>	<td>	vacuum_cost_page_dirty	</td>	<td>	整数(0-10000)[20]	</td>	<td>共有バッファのデータを書き換えた場合のコスト</td>
</tr><tr>
<td>◎</td>	<td>	vacuum_cost_limit	</td>	<td>	整数(0-10000)[200]	</td>	<td>累積されたコストがこの値を超えると、vacuum_cost_delayで設定した時間だけ、VACUUMやANALYZEを休止する</td>


</tr><tr bgcolor="#eeeeee">
<th colspan=4 align=left>Background writer</th>

</tr><tr>
<td>△	</td>	<td> bgwriter_delay		</td>	<td>整数(10-10000)[200ms]	</td>	<td>バックグランドライタ処理の実行間隔を設定。単位は[ミリ秒]</td>
</tr><tr>
<td>△	</td>	<td> bgwriter_lru_maxpages	</td>	<td>整数(0-1000)[100]	</td>	<td>１周期でバックグランドライタが書き込む最大のページ数。0の場合、バックグランドライタの書き込みが無効</td>
</tr><tr>
<td>△	</td>	<td> bgwriter_lru_multiplier	</td>	<td>浮動小数(0-10.0)[2.0]	</td><td>本文参照</td>
</tr><tr>
<td>△</td>	<td>bgwriter_flush_after</td>	<td>整数 [512kB]</td>	<td>バックグラウンドライタがこの値より多く書く度にOSが強制的にSSD・HDDに書き込む</td>

</tr><tr bgcolor="#eeeeee">
<th colspan=4 align=left>Asynchronous Behavior</th>

</tr><tr>
<td>◎</td>	<td>backend_flush_after</td>	<td>整数 [0]</td>	<td>Postgresプロセスがこの値より多く書く度にOSが強制的にSSD・HDDに書き込む。0の場合、無効</td>
</tr><tr>
<td>◎</td>	<td>effective_io_concurrency</td>	<td>整数 [1]</td>	<td>PostgreSQLが同時実行可能であると想定する同時ディスクI/O操作の数</td>
</tr><tr>
<td>◎</td>	<td>maintenance_io_concurrency</td>	<td>整数 [10]</td>	<td>PostgreSQLがmaintenance作業時に同時実行可能であると想定する同時ディスクI/O操作の数</td>
</tr><tr>
<td>×</td>	<td>max_worker_processes</td>	<td>整数 [8]</td>	<td>(パラレルワーカなど)ワーカープロセスの最大数</td>
</tr><tr>
<td>◎</td>	<td>max_parallel_workers_per_gather</td>	<td>整数 [2]</td>	<td>1クエリ毎の最大のパラレルワーカー数</td>
</tr><tr>
<td>◎</td>	<td>max_parallel_maintenance_workers</td>	<td>整数 [2]</td>	<td>(CREATE INDEXでbtreeを作成、VACUUM処理など単一ユーティリティコマンドで使われる)最大パラレルワーカー数</td>
</tr><tr>
<td>◎</td>	<td>max_parallel_workers</td>	<td>整数 [8]</td>	<td>最大のパラレルワーカー数</td>
</tr><tr>
<td>◎</td>	<td>parallel_leader_participation</td>	<td>on/off [on]</td>	<td>ワーカープロセスを待つ代わりに、GatherノードとGather Mergeノード配下の問い合わせプランをリーダープロセスが実行できるか否か</td>
</tr><tr>
<td>×</td>	<td>old_snapshot_threshold</td>	<td>整数 [-1]</td>	<td>スナップショットを使用する際に、「snapshot too old」エラーが起こるリスク無しに問い合わせスナップショットが利用できる最小の期間。この制限値を越えてデッド状態のままになったデータはバキュームしてしまうことが許可される。 これにより、長い間残っていたスナップショットによりデータが溢れてしまうのを防ぐことができる。</td>


</tr></table>

<br>



<table><tr bgcolor="#cccccc">
<th>記号</th>  <th>意味</th>
</tr><tr>
<td> ◎ </td>	<td>一般ユーザ/ロールが変更可能</td>
</tr><tr>
<td> ○ </td>	<td>スーパーユーザだけが変更可能</td>
</tr><tr>
<td> △ </td>	<td>設定ファイルを書き換え、pg_ctlをreloadモードで実行すれば変更可能(セッションやトランザクションは保持したまま、パラメータ値が変更できる)</td>
</tr><tr>
<td> × </td>	<td>再起動しないと変更できない</td>
</tr></table>

<br>


%CHAPTER 解説

<p>
・ shared_buffers
<br>
共有バッファサイズを設定します。設定値の選択は<a href="./admin-18.html">[<3-18>]</a>を参照してください。
</p>


<p>
・ VACUUM処理の遅延機能
<br>
(コストに基づく)VACUUM処理の遅延機能が実装されています。
</p>


%SECTION バックグランドライタ

<p>
CHECKPOINT処理による性能低下を避けるためにバックグランドライタが実装されました。
これは、通常ならCHECKPOINT実行時に一度に書き込まれる共有バッファ上のdirtyページを、
他の処理の邪魔にならないように少しずつ書き込む機能です。
</p>

<p>
バックグランドライタを活かすポイントは「どの程度のdirtyページを書き込むか適切に設定すること」です。
一気に全dirtyページが書き込まれるのならば、バックグランドライタそのものが無意味になります。
</p>

<p>
・bgwriter_delay
<br>
バックグランドライタの実行間隔を設定します。
</p>

<p>
・bgwriter_lru_maxpages,bgwriter_lru_multiplier
<br>
書き込むページ数の上限は以下の式で求まります。
</p>
<pre>
次の周期で書き込むページ数の上限
  = MIN(bgwriter_lru_multiplier * 最近の周期で書き込んだページ数の平均, bgwriter_lru_maxpages)
</pre>
<br>

<p>
bgwriter_lru_maxpagesは１周期でバックグランドライタが書き込む最大のページ数です。
次の周期で書き込むページ数の上限は、最近の周期で書き込んだページ数の平均値とこのパラメータbgwriter_lru_multiplierを掛け算した値か、bgwriter_lru_maxpagesのどちらか小さい方の値になります。
</p>


<p>
バックグランドライタはこれらの設定パラメータのうち"どちらかの"制限に達するまで、バッファを順に検査してdirtyページを書き出します。
<br>
なお、次回のバックグランドライタの処理は前回に書き出したページの次から検査を始めます。
</p>
