%FILE internal/param-05.html
%LASTMOD
%KEY pgsql-param05

%TITLE <a href="https://www.postgresql.org/docs/current/runtime-config-wal.html " target="_blank" rel="noopener noreferrer">WAL			WRITE AHEAD LOGGING</a>


<table border=1>
<caption>[<設定項目一覧>]</caption>
<tr bgcolor="#cccccc">
<th><sup>変更<br>可能性</sup></th> <th>設定項目</th>	<th>パラメータ<br>[デフォルト]</th>		<th>説明</th>
</tr><tr bgcolor="#eeeeee">
<th colspan=4 align=left>Settings</th>
</tr><tr>
<td>×	</td>	<td>wal_level	</td>	<td>[<表4-02>]参照[replica]  </td>	<td> WALログの出力レベルを設定。詳細は本文</td>
</tr><tr>
<td>△</td>	<td>	fsync	</td>	<td>on/off[on]	</td>	<td>WALログ書き込みとCHECKPOINTで、データ書き込みを同期的に行うか、非同期的に行うか</td>
</tr><tr>
<td>◎</td>	<td>	synchronous_commit	</td>	<td>on/off/local/remote_write[on]	</td>	<td>コミットの制御。詳細は[<2-11>]の[<コラム2-11>]参照</td>
</tr><tr>
<td>△</td>	<td>	wal_sync_method</td>	<td>		[fsync]	</td>	<td>	WALログ書き込みの同期方法を指定。[<表.4-03>]参照</td>
</tr><tr>
<td>△</td>	<td>	full_page_writes	</td>	<td>on/off[on]	</td>	<td>WALバッファページ全体をWALに書き込むが否か</td>

</tr><tr>
<td>×</td>	<td>wal_log_hints</td>	<td>on/off [off]</td>	<td>フルページライトのタイミングでヒントビットを書き込むか否か。チェックサムがonの場合はヒントビットの更新もWALに書き込まれるので、このオプションは無視される。</td>
</tr><tr>
<td>○</td>	<td>wal_compression</td>	<td>off/pglz/lz4/zstd [off]</td>	<td>WALの圧縮方法</td>
</tr><tr>
<td>○</td>	<td>wal_init_zero</td>	<td>on/off [on]</td>	<td>WALファイルを0で初期化するか否か。バージョン12から</td>
</tr><tr>
<td>○</td>	<td>wal_recycle</td>	<td>on/off [on]</td>	<td>WALファイルをリサイクルするか否か。バージョン12から</td>


</tr><tr>
<td>×	</td>	<td>wal_buffers		</td>	<td>整数[-1]		</td>	<td>WALバッファサイズ。バージョン9.1からのデフォルト'-1'はshared_buffersの1/32を割り当てる。ただし64[Kbyte]から16[Mbyte]の範囲内。明示的にサイズを設定する場合の最低サイズは32[Kbyte]。バージョン8.1まではバッファ数を指定した(バッファサイズは8[Kbyte]。最低限4以上)</td>
</tr><tr>
<td>△</td>	<td>	wal_writer_delay	</td>	<td>時間[200ms]		</td>	<td>WALライタの検査周期。範囲は1から10000ミリ秒。</td>

</tr><tr>
<td>△</td>	<td>wal_writer_flush_after</td>	<td>整数 [1MB]</td>	<td>WALライタがWALをflushする頻度。最後のflushが過去wal_writer_delay以内に起こなわれ、かつそれ以降wal_writer_flush_after相当のWALが生成されている場合は、WALはオペレーティングシステムに書き込まれますが、ディスクにはflushしない。</td>

</tr><tr>
<td>◎</td>	<td>wal_skip_threshold</td>	<td>整数 [2MB]</td>	<td>wal_levelがminimalで、トランザクションのコミットが永続リレーションを作るかあるいは書き換えた場合、新しいデータをどのように永続させるかを決定。 データがこの設定よりも少なければ、WALログに書き出し、そうでなければ影響のあるファイルに対してfsyncを実行する。
</td>

</tr><tr>
<td>○</td>	<td>	commit_delay	</td>	<td>	整数(0-100000)[0]	</td>	<td>遅延コミットの遅延時間。コミットまでの猶予時間を指定。単位は[マイクロ秒]</td>
</tr><tr>
<td>◎</td>	<td>	commit_siblings	</td>	<td>	整数(0-1000)[5]		</td>	<td>遅延コミットが有効となるpostgresプロセスの数(自分自身を含む)</td>


</tr><tr bgcolor="#eeeeee">
<th colspan=4 align=left>Checkpoints</th>

</tr><tr>
<td>△</td>	<td>	checkpoint_timeout	</td>	<td>整数(30-3500)[５m]	</td>	<td>チェックポイント起動の間隔。単位は[秒][分]など。</td>
</tr><tr>
<td>△</td>	<td>	checkpoint_completion_target</td>	<td>	0.0-1.0[0.5]</td>	<td>   負荷分散CHECKPOINTにおいて、CHECKPOINT周期(checkpoint_timeout)に対するCHECKPOINT実行時間の割合を設定する。</td>

</tr><tr>
<td>△</td>	<td>checkpoint_flush_after</td>	<td>整数 [256kB]</td>	<td>チェックポイント実行中にこのデータ量よりも多く書く度に、OSが記憶装置に書き込むことを強制する。(カーネルのページキャッシュが持つダーティデータの量を一定量に制限し、チェックポイントの最後にfsyncが実行される際、あるいはOSがバックグラウンドでデータを大きな塊で書き出す際に性能の急激な低下を招く可能性を減らす。)</td>

</tr><tr>
<td>△</td>	<td>	checkpoint_warning	</td>	<td>整数[30s]	</td>	<td>	WALセグメントの溢れによるチェックポイント実行が、設定した秒数以内に発生した場合にメッセージを書き込む。単位は[秒]。0ならばメッセージを出さない。</td>

</tr><tr>
<td>△</td>	<td>max_wal_size</td>	<td>整数 [1GB]</td>	<td>保存するWALの最大サイズ</td>

</tr><tr>
<td>△</td>	<td>min_wal_size</td>	<td>整数 [80MB]</td>	<td>保存するWALの最小サイズ</td>


</tr><tr bgcolor="#eeeeee">
<th colspan=4 align=left>Archiving</th>

</tr><tr>
<td>×</td>	<td>archive_mode　</td>	<td>	 on/off[off]  </td>	<td>  アーカイブロギングを行うか否か、明示的に指定する。</td>
</tr><tr>
<td>△	</td>	<td>archive_command</td>	<td>	文字列[''(空文字)]	</td>	<td>WALログをアーカイブログ保存用ディレクトリにコピーするコマンド。詳細は[<3-19>]参照</td>

</tr><tr>
<td>△</td>	<td>archive_library</td>	<td>文字列 [''(空文字)]</td>	<td>archive_commandで使用するコマンドのライブラリを設定。バージョン15から</td>


</tr><tr>
<td>△</td>	<td>archive_timeout</td>	<td>時間[0]</td>	<td>強制的にアーカイブログを生成する時間。設定した時間が過ぎると、WALログファイルを使いきったかどうかに関わらずアーカイブログ領域にコピーする。デフォルトは"0"で、強制的な切り替えはしない。</td>



</tr><tr bgcolor="#eeeeee">
<th colspan=4 align=left>Recovery</th>


</tr><tr>
<td>△</td>	<td>recovery_prefetch</td>	<td>on/off/try [try]</td>	<td>リカバリ中、まだバッファプールにないWALで参照されているブロックをプリフェッチしようとするかどうか。バージョン15から</td>
</tr><tr>
<td>×</td>	<td>wal_decode_buffer_size</td>	<td>整数 [512kB]</td>	<td>サーバがプリフェッチするブロックを見つけるためにWAL内をどれだけ先まで見ることができるかの制限。バージョン15から</td>


</tr><tr bgcolor="#eeeeee">
<th colspan=4 align=left>Archive Recovery</th>


</tr><tr>
<td>△(バージョン13までは×)   </td>	<td>restore_command</td>	<td>文字列 [''(空文字)]</td>	<td>リカバリ時にアーカイブからWALファイルを読み込むコマンドを書く。以前はrecovery.confにあった項目。バージョン12から</td>

</tr><tr>
<td>△</td>	<td>archive_cleanup_command</td>	<td>文字列 [''(空文字)]</td>	<td>リカバリ後にアーカイブのWALファイルをクリーンアップするコマンドを書く。バージョン12から</td>

</tr><tr>
<td>△</td>	<td>recovery_end_command</td>	<td>文字列 [''(空文字)]</td>	<td>リカバリ終了後に実行するコマンドを書く。バージョン12から</td>

</tr><tr bgcolor="#eeeeee">
<th colspan=4 align=left>Recovery Target</th>

</tr><tr>
<td>×</td>	<td>recovery_target</td>	<td>文字列''/'immediate' ['']</td>	<td>リカバリが一貫した状態になり次第(できるだけ早く)終了か否か。バージョン12から</td>

</tr><tr>
<td>×</td>	<td>recovery_target_name</td>	<td>文字列 ['']</td>	<td>pg_create_restore_point()により作成された）名前付きリストアポイントまでリカバリする。バージョン12から</td>

</tr><tr>
<td>×</td>	<td>recovery_target_time</td>	<td>文字列 ['']</td>	<td>指定したタイムスタンプまでリカバリする。バージョン12から</td>


</tr><tr>
<td>×</td>	<td>recovery_target_xid</td>	<td>文字列 ['']</td>	<td>指定したタイムスタンプまでリカバリする。バージョン12から</td>

</tr><tr>
<td>×</td>	<td>recovery_target_lsn</td>	<td>文字列 ['']</td>	<td>指定したLSNまでリカバリする。バージョン12から</td>


</tr><tr>
<td>×</td>	<td>recovery_target_inclusive</td>	<td>on/off [on]</td>	<td>指定した値ちょうど(on)でリカバリを停止するか否か。バージョン12から</td>

</tr><tr>
<td>×</td>	<td>recovery_target_timeline</td>	<td>整数or'current'/'latest' ['latest']</td>	<td>リカバリのターゲットタイムライン。バージョン12から</td>

</tr><tr>
<td>×</td>	<td>recovery_target_action</td>	<td>'pause'/'promote'/'shutdown' ['pause']</td>	<td>リカバリ後の動作。pauseからはpg_wal_replay_resume()で再開可能。バージョン12から</td>


</tr></table>
<br>


<table><tr bgcolor="#cccccc">
<th>記号</th>  <th>意味</th>
</tr><tr>
<td> ◎ </td>	<td>一般ユーザ/ロールが変更可能</td>
</tr><tr>
<td> ○ </td>	<td>スーパーユーザだけが変更可能</td>
</tr><tr>
<td> △ </td>	<td>設定ファイルを書き換え、pg_ctlをreloadモードで実行すれば変更可能(セッションやトランザクションは保持したまま、パラメータ値が変更できる)</td>
</tr><tr>
<td> × </td>	<td>再起動しないと変更できない</td>
</tr></table>

<br>


%CHAPTER 解説


<p>
・wal_level
<br>
設定できる値は次の３種類です([<表4-02>])。
</p>

<table border=1>
<caption>[<表4-02>]wal_levelの設定値</caption>
<tr bgcolor="#cccccc">
<th>値</th>	<th>説明</th>
</tr><tr>
<td>minimal</td>	<td>最低限の出力でWAL書き込みに関わる処理を極力低減する。</td>
</tr><tr>
<td>replica</td>	<td>可能な全てのレベルのWALログを出力する。</td>
</tr><tr>
<td>logical</td>	<td>ロジカルレプリケーションが可能なレベルのWALログを出力する。</td>


</tr></table>

<br>


<p>
・wal_sync_method
<br>
WALログの同期書き込み方法を設定します。設定できるパラメータは[<表4-03>]参照してください。
</p>

<table border=1>
<caption>[<表4-03>] 同期書き込み方法</caption>
<tr bgcolor="#cccccc">
<th>パラメータ</th>	<th>説明</th>
</tr><tr>
<td>fsync</td>		<td>コミットごとにfsync()を呼び出す</td>
</tr><tr>
<td>fdatasync</td>		<td>コミットごとにfdatasync()を呼び出す</td>
</tr><tr>
<td>open_sync</td>		<td>O_SYNCフラグを設定してopen()を呼び出し、WALファイルを書き出す</td>
</tr><tr>
<td>open_datasync</td>		<td>O_DSYNCフラグを設定してopen()を呼び出し、WALファイルを書き出す</td>
</tr><tr>
<td>fsync_writethrough</td>		<td>WINDOWS用。コミットごとにfsync()を呼び出す</td>
</tr></table>

<br>

<p>
バージョン9.1からcontribに同期書き込みの方式別ベンチマークツールpg_test_fsyncがサポートされました。
これを使って適切な同期書き込み方法を選択してください。
</p>

<p>
なお、誤解しやすいので念のため付記しますが、CHECKPOINTの同期書き込みはwal_sync_methodに依存せず、常にfsync()です。
</p>


<p>
・fsync
<br>
fsyncを無効(off)にすると、WAL書き込みだけでなくCHECKPOINTも非同期書き込みになります。
</p>


<p>
・archive_timeout
<br>
通常、アーカイブログはWALログを使い切るか、関数pg_switch_wal()を実行したときに作られます。
</p>

<p>
WALログサイズはデフォルトで16[Mbyte]で、もしもサーバがハードウエアクラッシュして、pg_wal以下のWALログが読み取り不可能になると、
たとえアーカイブログが残っていても、WALログに記録された多くの更新情報は失われてしまいます。
</p>

<p>
archive_timeoutに設定した時間毎に強制的にWALログを切り替えてアーカイブログ領域にコピーできます。
これによって、たとえpg_wal下のWALログが破壊されても、最悪archive_timeout時間の更新が失われるだけで済みます。
</p>
