%FILE internal/sql-42.html
%LASTMOD
%KEY pgsql-sql42

%TITLE セーブポイント <a href="https://www.postgresql.org/docs/current/sql-savepoint.html" target="_blank" rel="noopener noreferrer">SAVEPOINT</a> / <a href="https://www.postgresql.org/docs/current/sql-rollback-to.html" target="_blank" rel="noopener noreferrer">ROLLBACK TO SAVEPOINT</a> / <a href="https://www.postgresql.org/docs/current/sql-release-savepoint.html" target="_blank" rel="noopener noreferrer">RELEASE SAVEPOINT</a>


<pre>
[<書式>]

● セーブポイントの設定
SAVEPOINT savepoint_name

● セーブポイントまでのロールバック
ROLLBACK [ WORK | TRANSACTION ] TO [ SAVEPOINT ] savepoint_name

● セーブポイントの破棄
RELEASE [ SAVEPOINT ] savepoint_name
</pre>
<br>

<table>
<caption>パラメータ</caption>
<tr bgcolor="#cccccc">
<th>パラメータ</th>	<th>説明</th>
</tr><tr>
<td>savepoint_name</td>	<td>設定、もしくは破棄するセーブポイント名(最長63文字)</td>
</tr></table>

<br>


%CHAPTER 解説

<p>
セーブポイントとは、トランザクション内で部分的にロールバックできる機能です。
</p>

<p>
・セーブポイントの設定
<br>
セーブポイントはSAVEPOINT文で設定します。同一トランザクション内に複数のセーブポイントを設定できます。
</p>

<p>
同名のセーブポイント名を設定すると古く設定したセーブポイントは破棄されます。
</p>

<p>
・ロールバック
<br>
セーブポイントまでロールバックするには、ROLLBACK TO SAVEPOINT文を使います。
<br>
ROLLBACK TO SAVEPOINT文を実行すると、指定したセーブポイントの設定後に実行されたSQL文を全てロールバックします。
設定後に新たに設定したセーブポイントも破棄されます。
</p>

<p>
ROLLBACK TO SAVEPOINT文は指定したセーブポイントより後に設定した全てのセーブポイントを破棄しますが、その(指定した)セーブポイント自体は有効なまま残ります。
よって、何度でもそのセーブポイントまでロールバックできます。
</p>

<p>
・セーブポイントの破棄
<br>
明示的にセーブポイントを破棄するには、RELEASE SAVEPOINT文を実行します。
</p>

<p>
・セーブポイント名
<br>
セーブポイント名は通常の識別子と同じく、アルファベットかアンダースコア'_'からはじまり、数字を含む最長63文字の文字列です。
</p>


<p>
・カーソルとの関係
<br>
カーソルは、セーブポイントの影響を受けません。
よってセーブポイントまでロールバックしてもカーソル位置は戻りません。
</p>

%CHAPTER 実行例
<p>
・サーブポイントの利用例
<br>
トランザクション内でいくつかINSERT文を実行し、合間に適宜セーブポイントを設定します。
</p>

<pre>
sampledb=# BEGIN;
BEGIN

sampledb=# INSERT INTO savepoint_test VALUES (0, 'セーブポイント設定前');
INSERT 0 1

sampledb=# SAVEPOINT sp1;
SAVEPOINT

sampledb=# INSERT INTO savepoint_test VALUES (1, 'セーブポイントsp1設定後');
INSERT 0 1

sampledb=# SAVEPOINT sp2;
SAVEPOINT

sampledb=# INSERT INTO savepoint_test VALUES (2, 'セーブポイントsp2設定後');
INSERT 0 1

sampledb=# SAVEPOINT sp3;
SAVEPOINT

sampledb=# INSERT INTO savepoint_test VALUES (3, 'セーブポイントsp3設定後');
INSERT 0 1

sampledb=# SELECT * FROM savepoint_test;
 id |          disc
----+-------------------------
  0 | セーブポイント設定前
  1 | セーブポイントsp1設定後
  2 | セーブポイントsp2設定後
  3 | セーブポイントsp3設定後
(4 rows)
</pre>
<br>

<p>
ここでROLLBACK TO SAVEPOINT文で、セーブポイントsp2(の直前)までトランザクションをロールバックします。
</p>

<pre>
sampledb=# ROLLBACK TO SAVEPOINT sp2;
ROLLBACK

sampledb=# SELECT * FROM savepoint_test;
 id |          disc
----+-------------------------
  0 | セーブポイント設定前
  1 | セーブポイントsp1設定後
(2 rows)
</pre>
<br>

<p>
改めてINSERT文を実行した後、COMMIT文でトランザクションを終了すると、以下のような結果を得ます。
</p>


<pre>
sampledb=# INSERT INTO savepoint_test VALUES (4, 'セーブポイントのロールバック後');
INSERT 0 1

sampledb=# COMMIT;
COMMIT

sampledb=# SELECT * FROM savepoint_test;
 id |              disc
----+--------------------------------
  0 | セーブポイント設定前
  1 | セーブポイントsp1設定後
  4 | セーブポイントのロールバック後
(3 rows)
</pre>
<br>

<p>
・カーソルの挙動
<br>
カーソルはセーブポイントの影響を受けません。以下、その状況を具体的に示します。
<br>
カーソルを定義して1レコード取り出した後、セーブポイントsp1を設定します。次いで6レコード取り出します。
</p>

<pre>
sampledb=# BEGIN;
BEGIN

sampledb=# DECLARE pref CURSOR FOR SELECT * FROM prefecture ORDER BY id;
DECLARE CURSOR

sampledb=# FETCH IN pref;
 id |  name
----+--------
  1 | 北海道
(1 row)

sampledb=# SAVEPOINT sp1;
SAVEPOINT

sampledb=# FETCH FORWARD 6 IN pref;
 id | name
----+------
  2 | 青森
  3 | 岩手
  4 | 宮城
  5 | 秋田
  6 | 山形
  7 | 福島
(6 rows)
</pre>
<br>

<p>
ここで、セーブポイントsp1までロールバックしても、カーソル位置は戻りません。
</p>

<pre>
sampledb=# ROLLBACK TO SAVEPOINT sp1;
ROLLBACK

sampledb=# FETCH IN pref;
 id | name
----+------
  8 | 茨城
(1 row)
</pre>
<br>

