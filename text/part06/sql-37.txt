%FILE internal/sql-37.html
%LASTMOD
%KEY pgsql-sql37

%TITLE シーケンスの作成と変更、削除 <a href="https://www.postgresql.org/docs/current/sql-createsequence.html" target="_blank" rel="noopener noreferrer">CREATE SEQUENCE</a> / <a href="https://www.postgresql.org/docs/current/sql-altersequence.html" target="_blank" rel="noopener noreferrer">ALTER SEQUENCE</a> / <a href="https://www.postgresql.org/docs/current/sql-dropsequence.html" target="_blank" rel="noopener noreferrer">DROP SEQUENCE</a>

<pre>
[<書式>]

● シーケンスの作成
CREATE [ { TEMPORARY | TEMP } | UNLOGGED ] SEQUENCE [ IF NOT EXISTS ] name
    [ AS data_type ]
    [ INCREMENT [ BY ] increment ]
    [ MINVALUE minvalue | NO MINVALUE ] [ MAXVALUE maxvalue | NO MAXVALUE ]
    [ [ NO ] CYCLE ]
    [ START [ WITH ] start ]
    [ CACHE cache ]
    [ OWNED BY { table_name.column_name | NONE } ]

● シーケンスの変更
ALTER SEQUENCE[ IF EXISTS ] sequence_name [ INCREMENT [ BY ] increment ]
    [ MINVALUE minvalue | NO MINVALUE ] [ MAXVALUE maxvalue | NO MAXVALUE ]
    [ START [ WITH ] start ]
    [ RESTART [ WITH ] restart ] [ CACHE cache ] [ [ NO ] CYCLE ]
  [ OWNED BY { table.column | NONE } ]

ALTER SEQUENCE [ IF EXISTS ] sequence_name SET SCHEMA new_schema

ALTER SEQUENCE [ IF EXISTS ] sequence_name RENAME TO new_name

ALTER SEQUENCE [ IF EXISTS ] sequence_name OWNER TO new_owner

ALTER SEQUENCE [ IF EXISTS ] name SET { LOGGED | UNLOGGED }	(バージョン15から)

● シーケンスの削除
DROP SEQUENCE [ IF EXISTS ] sequence_name [, ...] [ CASCADE | RESTRICT ]
</pre>
<br>

<table>
<caption>パラメータ</caption>
<tr bgcolor="#cccccc">
<th>パラメータ</th>	<th>説明</th>
</tr><tr>
<td>sequence_name</td>	<td>作成、変更、または削除するシーケンス名</td>
</tr><tr>
<td>new_schema</td>	<td>シーケンスの属するスキーマをnew_schemaに変更する</td>
</tr><tr>
<td>new_name</td>	<td>シーケンス名をnew_nameに変更する</td>
</tr><tr>
<td>new_owner</td>	<td>シーケンスをnew_owner(テーブルのカラム)に結びつけ直す</td>

</tr></table>

<br>


<table>
<caption>句</caption>
<tr bgcolor="#cccccc">
<th>句</th>	<th>説明</th>
</tr><tr>
<td>INCREMENT [BY] increment</td>	<td>増加量を設定。デフォルトは1 </td>
</tr><tr>
<td>MINVALUE minvalue</td>	<td>シーケンス番号の最小値。デフォルトは昇順の場合1、降順の場合-2^(63)-1 = -9223372036854775807</td>
</tr><tr>
<td>MAXVALUE maxvalue	</td>	<td>シーケンス番号の最大値。デフォルトは昇順の場合2^(63)-1 = 9223372036854775807、降順の場合-1 </td>
</tr><tr>
<td>START [WITH] start	</td>	<td>シーケンス番号の初期値。デフォルトは昇順の場合minvalue、降順の場合maxvalue </td>
</tr><tr>
<td>RESTART [WITH] restart</td>	<td>シーケンス番号の現在値をrestartに変更する</td>
</tr><tr>
<td>CACHE cache	</td>	<td>高速アクセスのために、予めシーケンス番号を割り当ててメモリに保存</td>
</tr><tr>
<td>OWNED BY table.column</td>	<td>シーケンスを特定のテーブルのカラムtable.columnに結びつける。詳細は本文。デフォルト'NONE'</td>
</tr></table>

<br>

<table>
<caption>オプション</caption>
<tr bgcolor="#cccccc">
<th>オプション</th>	<th>説明</th>
</tr><tr>
<td>TEMPORARY, TEMP</td>	<td>一時的なシーケンスの作成。セッション終了時、自動的に削除</td>
</tr><tr>
<td>CYCLE	</td>	<td>シーケンス値を循環させる。設定しないと最大値(昇順の場合、降順なら最小値)に達した後、エラーを返す</td>
</tr><tr>
<td>NO CYCLE	</td>	<td>シーケンス値を循環させない。デフォルト</td>
</tr><tr>
<td>CASCADE	</td>	<td>シーケンスが依存するオブジェクトがある場合、関連するオブジェクトも含めて削除する</td>
</tr><tr>
<td>RESTRICT</td>	<td>シーケンスが依存するオブジェクトがある場合、そのシーケンスを削除しない。デフォルト</td>
</tr><tr>
<td>NO MINVALUE	</td>	<td>最小値としてデフォルト値を使う</td>
</tr><tr>
<td>NO MAXVALUE	</td>	<td>最大値としてデフォルト値を使う</td>
</tr><tr>
<td>IF EXISTS	</td>	<td>削除するシーケンスが存在しない場合もエラーを返さない</td>
</tr><tr>
<td>UNLOGGED	</td>	<td>設定した場合、シーケンス情報をWALに書き込まない。故にクラッシュセーフでなくなる。性能への影響はほとんどない。バージョン15から</td>
</tr></table>

<br>

<table>
<caption>関数</caption>
<tr bgcolor="#cccccc">
<th>関数</th>	<th>説明</th>
</tr><tr>
<td>nextval(sequence_name)	</td>	<td>次のシーケンス値を取り出す</td>
</tr><tr>
<td>currval(sequence_name)	</td>	<td>現在設定されているシーケンス値を取り出す</td>
</tr><tr>
<td>setval(sequence_name, new_value)</td>	<td>シーケンスに新しい値(new_value)を再設定する</td>
</tr></table>

<br>

%CHAPTER 解説

<p>
PostgreSQLのシーケンスはbigint型と同じで、8バイト整数の範囲(-9223372036854775808〜9223372036854775807まで)で値を設定、取得できます。
</p>

<p>
PostgreSQLのシーケンスはSQL:2003標準にほぼ準拠しています。違いは次の2点です。
</p>
<ol>
<li> 'AS <data type>'式は未サポート</li>
<li> 次の値を取り出すには、NEXT VALUE FOR式ではなく、関数nextval()を使用</li>
</ol>

<p>
シーケンスの一覧はメタコマンド\dsで表示できます。
</p>

<pre>
sampledb=# \ds
             List of relations
 Schema |    Name    |   Type   |  Owner
--------+------------+----------+----------
 public | customerid | sequence | postgres
 public | seq_cycle  | sequence | postgres
 public | seq_limit  | sequence | postgres
 public | seq_test   | sequence | postgres
(4 rows)
</pre>
<br>

<p>
・シーケンスの利用手順
<br>
シーケンスの利用手順は次のとおりです。
</p>

<ol>
<li>CREATE SEQUENCE文でシーケンスを作成</li>
<li>数値が必要なときに関数:nextval()、currval()を呼び出し、数値を取り出す</li>
</ol>

<p>
・OWNED BY 句
<br>
バージョン8.2から、OWNED BY句でシーケンスを特定のテーブルのカラムに結びつけることができます。
<br>
例えば"OWNED BY table.column"を設定すると、テーブルtableの削除と同時にシーケンスも削除されます。
デフォルトは"OWNED BY NONE"でテーブルを削除してもシーケンスは削除されません。
</p>


<p>
・CYCLE
<br>
CYCLEオプションでシーケンス値を循環できます。
CYCLEオプションを設定しないと、最大値(昇順の場合、降順なら最小値)に達した後はエラーが返ります。
</p>


<p>
・スキーマ、シーケンス名、所有者(テーブルのカラム)の変更
<br>
バージョン8.1からシーケンスの属するスキーマを、バージョン8.3からシーケンス名を、バージョン8.4から所有者(テーブルのカラム)を、それぞれ変更できます。
</p>


<p>
・GENERATED { ALWAYS | BY DEFAULT } AS IDENTITY [ ( sequence_options ) ]
<br>
CREATE TABLE実行時、GENERATED AS IDENTITY句で自動的にシーケンスを設定できる。
</p>

<br>

<pre>
postgres=# CREATE TABLE a1 (id int, seq bigint GENERATED ALWAYS AS IDENTITY);
CREATE TABLE
postgres=# \d+ a1
                                                      Table "public.a1"
 Column |  Type   | Collation | Nullable |           Default            | Storage | Compression | Stats target | Description
--------+---------+-----------+----------+------------------------------+---------+-------------+--------------+-------------
 id     | integer |           |          |                              | plain   |             |              |
 seq    | bigint  |           | not null | generated always as identity | plain   |             |              |
Access method: heap

postgres=# \ds
            List of relations
 Schema |    Name    |   Type   | Owner
--------+------------+----------+--------
 public | a1_seq_seq | sequence | ubuntu
(1 row)

postgres=# INSERT INTO a1 VALUES(1);
INSERT 0 1
postgres=# INSERT INTO a1 VALUES(2);
INSERT 0 1
postgres=# SELECT * FROM a1;
 id | seq
----+-----
  1 |   1
  2 |   2
(2 rows)

</pre>
<br>


%CHAPTER 実行例

<p>
テーブルcustomerlistについて、シーケンスcustomeridを使ってidを自動割り当てます。
<br>
関数nextval()を呼び出す毎に、新しい値(この場合、1づつ増加)を得ます。
同じ値が必要なときは関数currval()を呼び出します。
</p>

<pre>
sampledb=# CREATE SEQUENCE customerid;
CREATE SEQUENCE

sampledb=# INSERT INTO customerlist VALUES (nextval('customerid'),
sampledb(#       'デューク東郷', 4);
INSERT 24899 1

sampledb=# INSERT INTO customerlist VALUES (nextval('customerid'),
sampledb(#      'アーネスト東郷', 2);
INSERT 24900 1

sampledb=# SELECT * FROM customerlist;
 id |        name        | companycode
----+--------------------+-------------
  1 | デューク東郷       |           4
  2 | アーネスト東郷     |           2
(2 rows)
</pre>
<br>

<p>
・OWNED BY句
<br>
上記のように、テーブルの特定のカラムにシーケンスを結びつける場合、OWNED BY句が便利です。
</p>

<p>
例を示します。
<br>
シーケンスmemberidを、テーブルmemberlistのカラムidと結びつけて作成します。
テーブルmemberlistを削除するとシーケンスmemberidも削除されます。
</p>

<pre>
sampledb=# CREATE TABLE memberlist (id int, name text);
CREATE TABLE

sampledb=# -- カラムmemberlist.idと結びつけて作成
sampledb=# CREATE SEQUENCE memberid OWNED BY memberlist.id;
CREATE SEQUENCE

sampledb-# -- カラムidのデフォルト値をnextval('memberid')に再設定
sampledb=# ALTER TABLE memberlist ALTER id
sampledb-#                     SET DEFAULT nextval('memberid');
ALTER TABLE

sampledb=# -- メンバー登録
sampledb=# INSERT INTO memberlist (name)
sampledb-#               VALUES ('Alice'),('Bobby'),('Candy');
INSERT 0 3
sampledb=# SELECT * FROM memberlist;
 id | name
----+-------
  1 | Alice
  2 | Bobby
  3 | Candy
(3 rows)

sampledb=# -- シーケンスmemberidの確認
sampledb=# \ds memberid
            List of relations
 Schema |   Name   |   Type   |  Owner
--------+----------+----------+----------
 public | memberid | sequence | postgres
(1 row)

sampledb=# -- テーブルmemberlistを削除
sampledb=# DROP TABLE memberlist;
DROP TABLE

sampledb=# -- シーケンスmemberidも削除されていることを確認
sampledb=# \ds memberid
No matching relations found.
</pre>
<br>

<p>
・シーケンス値のオーバーフロー
<br>
CYCLEオプションを設定しない(デフォルトのNO CYCLE)場合、最大値を超えた後にシーケンス値を取り出そうとすると、エラーが返ります。
</p>

<pre>
sampledb=# CREATE SEQUENCE seq_limit MINVALUE 9223372036854775806 NO CYCLE;
CREATE SEQUENCE
sampledb=# SELECT nextval ('seq_limit');
       nextval
---------------------
 9223372036854775806
(1 row)

sampledb=# SELECT nextval ('seq_limit');
       nextval
---------------------
 9223372036854775807
(1 row)

sampledb=# SELECT nextval ('seq_limit');
ERROR:  nextval: reached maximum value of sequence "seq_limit" (9223372036854775807)
</pre>
<br>

<p>
・CYCLEオプションを設定してシーケンスを作成
<br>
{0, 15, 30, 0, 15, .....}と、0から30まで15づつの増加を繰り返すシーケンスを定義します。
</p>

<pre>
sampledb=# CREATE SEQUENCE seq_cycle INCREMENT 15
sampledb-#		   MINVALUE 0 MAXVALUE 30
sampledb-#		   START 0 CYCLE;

sampledb=# SELECT nextval('seq_cycle');
nextval
---------
0
(1 row)
sampledb=# SELECT nextval('seq_cycle');
nextval
---------
15
(1 row)

sampledb=# SELECT nextval('seq_cycle');
nextval
---------
30
(1 row)

sampledb=# SELECT nextval('seq_cycle');
nextval
---------
0
(1 row)
</pre>
<br>

<p>
・シーケンスの設定値の再設定
<br>
関数setval()を使って、シーケンスの値を再設定できます。
</p>

<pre>
sampledb=# CREATE SEQUENCE seq_test;
CREATE SEQUENCE

sampledb=# SELECT nextval('seq_test');
 nextval
---------
       1
(1 row)

sampledb=# SELECT setval('seq_test', 10);	← シーケンスの値を10に再設定
 setval
--------
     10
(1 row)

sampledb=# SELECT nextval('seq_test');		← 再設定後のnextval()の返り値は11
 nextval
---------
      11
(1 row)
</pre>
<br>

<p>
ALTER SEQUENCE文でも再設定できます。
ただし、上記の関数setval()を使って再設定した場合と返り値が異なるので注意してください。
</p>

<pre>
sampledb=# ALTER SEQUENCE seq_test RESTART WITH 10;
ALTER SEQUENCE

sampledb=# SELECT nextval('seq_test');		← 再設定後のnextval()の返り値は10
 nextval
---------
      10
(1 row)
</pre>
<br>

<p>
・シーケンスの削除
<br>
シーケンスseq_setvalを削除します。
</p>

<pre>
sampledb=# DROP SEQUENCE seq_setval;
DROP SEQUENCE
</pre>
<br>

