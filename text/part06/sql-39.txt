%FILE internal/sql-39.html
%LASTMOD
%KEY pgsql-sql39

%TITLE カーソル <a href="https://www.postgresql.org/docs/current/sql-declare.html" target="_blank" rel="noopener noreferrer">DECLARE</a> / <a href="https://www.postgresql.org/docs/current/sql-close.html" target="_blank" rel="noopener noreferrer">CLOSE</a> / <a href="https://www.postgresql.org/docs/current/sql-fetch.html" target="_blank" rel="noopener noreferrer">FETCH</a> / <a href="https://www.postgresql.org/docs/current/sql-move.html" target="_blank" rel="noopener noreferrer">MOVE</a>


<pre>
[<書式>]

● カーソルの定義
DECLARE cursor_name [ BINARY ] [ INSENSITIVE ] [ [ NO ] SCROLL ]
    CURSOR [ { WITH | WITHOUT } HOLD ] FOR query

●　カーソルの削除
CLOSE {cursor_name | ALL }

● レコードの取得　FETCH
FETCH [ direction { FROM | IN } ] cursor_name

● カーソル位置の移動
MOVE [ direction { FROM | IN } ] cursor_name
</pre>
<br>

<table>
<caption>パラメータ</caption>
<tr bgcolor="#cccccc">
<th>パラメータ</th>	<th>説明</th>
</tr><tr>
<td>cursor_name</td>	<td>カーソル名
</tr><tr>
<td>query</td>	<td>カーソルでデータを取り出すSELECT文
</tr></table>

<br>


<table>
<caption>オプション</caption>
</tr><tr bgcolor="#cccccc">
<th>オプション</th>	<th>説明</th>
</tr><tr>
<td>BINARY</td>	<td>バイナリ形式によるデータの取得。PostgreSQLの独自拡張</td>
</tr><tr>
<td>SCROLL</td>	<td>逆順にレコードを取り出す。FETCH BACKWARD文など、順序通りでない方法でレコードを取り出す場合に設定</td>
</tr><tr>
<td>NO SCROLL</td>	<td>順序通りにしかレコードを取り出せないように強制する</td>
</tr><tr>
<td>WITH HOLD</td>	<td>カーソルを作成したトランザクションが正常に終了(COMMIT)した後でも、このカーソルを使用できる</td>
</tr><tr>
<td>WITHOUT  HOLD</td>	<td>カーソルを作成したトランザクション外ではこのカーソルを使用できない。デフォルト</td>
</tr><tr>
<td>ALL	</td>	<td>すべてのカーソルをCLOSEする</td>
</tr><tr>
<td>direction</td>	<td>レコードを取り出す方向を定義。下表参照[FORWARD] </td>
</tr><tr>
<td>INSENSITIVE</td>	<td>SQL92、99標準との互換性確保。PostgreSQLでは無効</td>
</tr></table>

<br>


<table>
<caption>direction</caption>
</tr><tr bgcolor="#cccccc">
<th>direction　　　　　</th>	<th>説明</th>
</tr><tr>
<td>count</td>	<td>取り出す、もしくは移動するレコード数countを指定。負の整数値はFORWARDとBACKWARDの意味を切替える。0ならALLと同じ</td>
</tr><tr>
<td>NEXT</td>	<td>次のレコード(countに1を指定することと同じ) </td>
</tr><tr>
<td>PRIOR</td>	<td>前のレコード(countに−1を指定することと同じ) </td>
</tr><tr>
<td>ABSOLUTE count</td>	<td>FETCHの場合、先頭からcount番目のレコードを取り出す。MOVEの場合、先頭からcount番目のレコードに移動。countが-1なら最終レコードに移動、0なら現在レコードのまま</td>
</tr><tr>
<td>RELATIVE count</td>	<td>FETCHの場合、先頭からcount番目以降のレコードを取り出す。MOVEの場合、現在位置からcount番目のレコードに移動。countが負数なら、前方に移動、0なら現在レコードのまま</td>
</tr><tr>
<td>FIRST</td>	<td>先頭レコード(ABSOLUTE 1を指定することと同じ)</td>
</tr><tr>
<td>LAST</td>	<td>最終レコード(ABSOLUTE -1を指定することと同じ)</td>
</tr><tr>
<td>ALL	</td>	<td>FETCHの場合、残っているすべてのレコードを取り出し(countに0を指定することと同じ)。MOVEの場合、(仮想的に)最終レコードの次に移動したことと等価(現在のレコードを取り出せない)</td>
</tr><tr>
<td>FORWARD</td>	<td>NEXTと同じ。次のレコードを取り出す、もしくは次のレコードに移動する(countに1を指定することと同じ) </td>
</tr><tr>
<td>FORWARD count</td>	<td>FETCHの場合、後方のレコードをcountだけ取り出し。MOVEの場合、countだけ移動</td>
</tr><tr>
<td>FORWARD ALL</td>	<td>ALLと同じ。FETCHの場合、残っているすべてのレコードを取り出し。MOVEの場合、(仮想的に)最終レコードの次に移動したことと等価(現在のレコードを取り出せない)</td>
</tr><tr>
<td>BACKWARD</td>	<td>PRIORと同じ。前のレコード(countに-1を指定することと同じ) </td>
</tr><tr>
<td>BACKWARD count</td>	<td>FETCHの場合、前方のレコードをcountだけ逆順に取り出し。MOVEの場合、前方にcountだけ移動</td>
</tr><tr>
<td>BACKWARD ALL</td>	<td>FETCHの場合、前方のレコードをすべて逆順に取り出し。MOVEの場合、(仮想的に)先頭レコードの1つ前に移動したことと等価。(現在のレコードを取り出せない)</td>
</tr></table>

<br>


%CHAPTER 解説
<p>
カーソルを使って、問い合わせ結果を複数レコードずつ順次取り出したり、必要な箇所だけ取り出せます。
<br>
カーソルを使ったSQL文の構造は次のとおりです。
</p>


[<通常のカーソルの利用方法>]
<pre>
BEGIN;                 ← トランザクションの開始
DECLARE                ← カーソルの定義
FETCH                  ← レコードの取得
MOVE                   ← カーソル位置の移動
CLOSE                  ← カーソルのクローズ
COMMIT;                ← トランザクションの終了
</pre>
<br>

<p>
バージョン7.4以降、WITH HOLDオプションを設定することで、トランザクション外でもカーソルが利用可能になりました。
</p>


[<トランザクション外でのカーソルの利用方法>]
<pre>
BEGIN;                  ← トランザクションの開始
DECLARE WITH HOLD       ← カーソルの定義
FETCH                   ← レコードの取得
MOVE

COMMIT;                 ← トランザクションの終了

FETCH                   ← レコードの取得
MOVE
CLOSE                   ← カーソルのクローズ
</pre>
<br>

<p>
トランザクションブロック内で複数のカーソルを定義することも可能です。
</p>

<p>
SQL92標準はデータの更新も可能ですが、バージョン8.2まではデータの読み出し(SELECT)しかできませんでした。
<br>
バージョン8.3から、取り出したカーソルのデータの更新や削除ができるようになりました。
</p>


%CHAPTER カーソルの定義と削除

<p>
DECLARE文でカーソルを定義し、CLOSE文でカーソルを削除します。
</p>

<p>
・SCROLL、NO SCROLL
<br>
SCROLLオプションを設定して作成したカーソルは、FETCH文のBACKWARDオプションでレコードを
<u>逆順に取り出せません</u>。
他方、NO SCROLLオプション(デフォルト)を設定すれば、逆順にレコードを取り出せます。
</p>

<p>
SCROLLオプションは逆順にレコードを取り出せないかわりに、プランナがより良い問い合わせプランを見つける可能性が高くなり、結果としてFETCH文などの実行速度が向上する可能性があります。
</p>

<p>
・WITH HOLD、WITHOUT HOLD
<br>
WITH HOLDオプションを設定して作成したカーソルは、このカーソルを生成したトランザクションが正常に終了(COMMIT)した後でも、引続きカーソルからレコードを取り出す(FETCH)ことができます。
<br>
デフォルト(WITHOUT HOLD)では、カーソルを作成したトランザクション外で使用できません。
</p>


%CHAPTER FETCH

<p>
FETCH文でカーソルからレコードを取り出します。
</p>

<p>
・BACKWARD
<br>
BACKWARDオプションで(再び)前方のレコードを取り出せます。このとき、レコードは逆順に取り出されます。
</p>

<p>
・同一レコードの取り出し
<br>
'RELATIVE 0'、'FORWARD 0'、および'BACKWARD 0'で、同一レコードを繰り返し取り出せます。
</p>

%CHAPTER MOVE

<p>
MOVE文でカーソルの位置を移動します。
</p>

<p>
・[FORWARD | BACKWARD ] ALLとFIRST, LASTの違い
<br>
directionのなかで、混乱しやすいALL関連(ALL, FORWARD ALL, BACKWARD ALL)とFIRST,LASTの違いを図示します([<図6-05>]参照)。
</p>


<table border=1>
<caption>[<図6-05>] FORWARD ALL, BACKWARDALLとFIRST, LASTの違い</caption>
<tr><td>
<left>
<img src="./fig-6-05.png" width=400>
</left>
</td></tr></table>


<p>
カーソル作成時とBACKWARD ALLでカーソルを移動した場合、カーソル位置は先頭レコードのさらに1つ手前になります。これに対してFIRSTでカーソルを移動した場合、カーソル位置は先頭レコードになります。FORWARD ALLとLASTの関係も同様です。
</p>

%CHAPTER 実行例

%SECTION カーソルの定義と削除

<p>
・テーブルに対するカーソルの定義
<br>
トランザクションを開始した後、カーソルを定義します。
</p>

<pre>
sampledb=# BEGIN;
BEGIN

sampledb=# /* カーソルを定義 */
sampledb=# DECLARE pref CURSOR FOR SELECT * FROM prefecture ORDER BY id;
DECLARE
</pre>
<br>


<p>
・ビューに対するカーソルの定義
<br>
テーブルだけでなく、ビューに対してもカーソルを定義できます。
</p>

<pre>
sampledb=# BEGIN;
BEGIN
sampledb=# DECLARE view_cursor CURSOR FOR
sampledb-#                SELECT * FROM customer_view ORDER BY id;
DECLARE
</pre>
<br>


<p>
・WITH HOLDオプション
<br>
WITH HOLDオプションを設定してカーソルprefを再定義します。
</p>

<pre>
sampledb=# BEGIN;
BEGIN

sampledb=# DECLARE pref CURSOR WITH HOLD FOR SELECT * FROM prefecture
sampledb-#                                                ORDER BY id;
DECLARE CURSOR
</pre>
<br>

<p>
WITH HOLDオプションを設定したカーソルprefは、カーソルを定義したトランザクションが正常に終了(COMMIT)した後も、カーソルからレコードを取り出せます。
</p>

<pre>
sampledb=# FETCH  6 IN pref;
 id |  name
----+--------
  1 | 北海道
  2 | 青森
  3 | 岩手
  4 | 宮城
  5 | 秋田
  6 | 山形
(6 rows)

sampledb=# COMMIT;
COMMIT

sampledb=# FETCH  6 IN pref;
 id | name
----+------
  7 | 福島
  8 | 茨城
  9 | 栃木
 10 | 群馬
 11 | 埼玉
 12 | 千葉
(6 rows)
</pre>
<br>


%SECTION カーソルで取り出す

<p>
・カーソルによるレコードの取り出し
<br>
都道府県名テーブルprefectureにカーソルprefを定義し、1レコード目を取り出します。
</p>

<pre>
sampledb=# DECLARE pref CURSOR FOR SELECT * FROM prefecture
sampledb-#                                        ORDER BY id;
DECLARE CURSOR
sampledb=# FETCH IN pref;
 id |  name
----+--------
  1 | 北海道
(1 row)
</pre>
<br>

<p>
・複数レコードの取り出し
<br>
6レコード同時に取り出します。
</p>

<pre>
sampledb=# FETCH FORWARD 6 IN pref;
 id | name
----+------
  2 | 青森
  3 | 岩手
  4 | 宮城
  5 | 秋田
  6 | 山形
  7 | 福島
(6 rows)
</pre>
<br>

<p>
・同一レコードの取り出し
<br>
カーソルを移動させず、同一レコードを繰り返し取り出します。
</p>

<pre>
sampledb=# FETCH RELATIVE 0 IN pref;
 id | name
----+------
  7 | 福島
(1 row)

sampledb=# FETCH FORWARD 0 IN pref;
 id | name
----+------
  7 | 福島
(1 row)

sampledb=# FETCH BACKWARD 0 IN pref;
 id | name
----+------
  7 | 福島
(1 row)
</pre>
<br>

<p>
・カーソルの前方のレコードを取り出し
<br>
この例では、カーソルの現在位置は7レコード目です。BACKWARDオプションが指定されたことで6レコード目、5レコード目、4レコード目と逆順に、計3レコードを取り出します。
</p>

<pre>
sampledb=# FETCH BACKWARD 3 IN pref;
 id | name
----+------
  6 | 山形
  5 | 秋田
  4 | 宮城
(3 rows)
</pre>
<br>

<p>
・次のレコードの取り出し
<br>
カーソルの現在位置は4レコード目です。FETCH NEXT文を使い、5レコード目を取り出します。
</p>

<pre>
sampledb=# FETCH NEXT IN pref;
 id | name
----+------
  5 | 秋田
(1 row)
</pre>
<br>


%SECTION カーソルの移動

<p>
・カーソルの移動
<br>
都道府県名テーブルprefectureにカーソルprefを定義し、13レコード移動してからレコードを取り出します。
</p>

<pre>
sampledb=# BEGIN;
BEGIN
sampledb=# DECLARE pref CURSOR FOR SELECT * FROM prefecture ORDER BY id;
DECLARE CURSOR
sampledb=# MOVE 13 IN pref;
MOVE 13
sampledb=# FETCH IN pref;
 id |  name
----+--------
 14 | 神奈川
(1 row)
</pre>
<br>

<p>
・カーソルの前方移動
<br>
BACKWARDオプションを使い、前方に戻ることも可能です。
</p>

<pre>
sampledb=# MOVE BACKWARD 8 IN pref;
MOVE 8
sampledb=# FETCH IN pref;
 id | name
----+------
  7 | 福島
(1 row)
</pre>
<br>

<p>
・LASTとALL(もしくはFORWARD ALL)の挙動の違い
<br>
LASTを指定すると、カーソルは最終レコードに移動します。
</p>

<pre>
sampledb=# MOVE LAST IN pref;
MOVE 1

sampledb=# FETCH RELATIVE 0 IN pref;
 id | name
----+------
 47 | 沖縄
(1 row)
</pre>
<br>

<p>
ALLを指定すると、カーソルは(仮想的に)最終レコードのさらに次のレコードに移動したかのような挙動を示します。
実際にMOVE ALLで移動し、'FETCH BACKWARD 1'でカーソルの1レコード前のレコードを取り出すと、それが最終レコードであることがわかります。
</p>

<pre>
sampledb=# MOVE ALL IN pref;
MOVE 0

sampledb=# FETCH  RELATIVE 0 IN pref;
 id | name
----+------
(0 rows)

sampledb=# FETCH IN pref;
 id | name
----+------
(0 rows)

sampledb=# FETCH BACKWARD 1 IN pref;
 id | name
----+------
 47 | 沖縄
(1 row)
</pre>
<br>

<p>
・先頭レコードにカーソルを移動
<br>
BACKWARD ALLを指定すると、先頭レコードにカーソルが移動します。
</p>

<pre>
sampledb=# MOVE BACKWARD ALL IN pref;
MOVE 47

sampledb=# FETCH IN pref;
 id | name
----+--------
  1 | 北海道
(1 row)
</pre>
<br>

<p>
パラメータ'count'にテーブルのレコード数を越えた大きな値を設定してもエラーとはならず、移動可能なレコード数だけ移動します。MOVE文は移動したレコード数を返します。
</p>

<pre>
sampledb=# -- カーソルprefに保持されているテーブルのレコード数は47。
sampledb=# MOVE 1000 IN pref; -- かなり遠くまで移動しようとしたが....
MOVE 46
</pre>
<br>


%SECTION データの更新と削除

<p>
カーソルで最近取り出した1レコードを更新します。
</p>

<pre>
sampledb=# BEGIN;
BEGIN
sampledb=# --カーソルの定義は結合やサブクエリを含まない単純なものに限る
sampledb=# DECLARE pref CURSOR FOR select * from prefecture;
DECLARE CURSOR
sampledb=# FETCH FORWARD 7 IN pref;
 id |  name  | mark
----+--------+------
  1 | 北海道 |
  2 | 青森県 |
  3 | 岩手県 |
  4 | 宮城県 |
  5 | 秋田県 |
  6 | 山形県 |
  7 | 福島県 |
(7 rows)

sampledb=# -- 更新されるのは最近取り出した1レコードのみ
sampledb=# UPDATE prefecture SET mark = 'God Bless'
sampledb-#                       WHERE CURRENT OF pref;
UPDATE 1
sampledb=# SELECT * FROM prefecture WHERE id < 8;
 id |  name  |   mark
----+--------+-----------
  1 | 北海道 |
  2 | 青森県 |
  3 | 岩手県 |
  4 | 宮城県 |
  5 | 秋田県 |
  6 | 山形県 |
  7 | 福島県 | God Bless
(7 rows)
</pre>
<br>


<p>
次に、カーソルで最近取り出した1レコードを削除します。
</p>

<pre>
sampledb=# BEGIN;
BEGIN
sampledb=# --カーソルの定義は結合やサブクエリを含まない単純なものに限る
sampledb=# DECLARE pref CURSOR FOR select * from prefecture;
DECLARE CURSOR
sampledb=# FETCH FORWARD 13 IN pref;
 id |  name  | mark
----+--------+------
  1 | 北海道 |
  2 | 青森県 |
  3 | 岩手県 |
  4 | 宮城県 |
  5 | 秋田県 |
  6 | 山形県 |
  7 | 福島県 |
  8 | 茨城県 |
  9 | 栃木県 |
 10 | 群馬県 |
 11 | 埼玉県 |
 12 | 千葉県 |
 13 | 東京都 |
(13 rows)

sampledb=# -- 削除されるのは最近取り出した1レコードのみ
sampledb=# DELETE FROM prefecture WHERE CURRENT OF pref;
DELETE 1

sampledb=# -- "13 東京都"が削除されている
sampledb=# SELECT * FROM prefecture WHERE 10 < id AND id < 15;
 id |   name   | mark
----+----------+------
 11 | 埼玉県   |
 12 | 千葉県   |
 14 | 神奈川県 |
(3 rows)
</pre>
<br>

