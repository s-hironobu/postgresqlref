%FILE internal/sql-09.html
%LASTMOD
%KEY pgsql-sql09

%TITLE スキーマの定義/変更/削除 <a href="https://www.postgresql.org/docs/current/sql-createschema.html" target="_blank" rel="noopener noreferrer">CREATE SCHEMA</a> / <a href="https://www.postgresql.org/docs/current/sql-dropschema.html" target="_blank" rel="noopener noreferrer">DROP SCHEMA</a> / <a href="https://www.postgresql.org/docs/current/sql-alterschema.html" target="_blank" rel="noopener noreferrer">ALTER SCHEMA</a>

<pre>
[<書式>]

● スキーマの定義
CREATE SCHEMA schema_name [ AUTHORIZATION role_specification ] [ schema_element [ ... ] ]
CREATE SCHEMA AUTHORIZATION role_specification [ schema_element [ ... ] ]
CREATE SCHEMA IF NOT EXISTS schema_name [ AUTHORIZATION role_specification ]
CREATE SCHEMA IF NOT EXISTS AUTHORIZATION role_specification

where role_specification can be:

    user_name
  | CURRENT_ROLE
  | CURRENT_USER
  | SESSION_USER


● スキーマの変更
ALTER SCHEMA schemaname RENAME TO new_schemaname

ALTER SCHEMA schemaname OWNER TO { new_owner | CURRENT_ROLE | CURRENT_USER | SESSION_USER }

● スキーマの削除
DROP SCHEMA [IF EXISTS] schema_name [, ...] [ CASCADE | RESTRICT ]

</pre>
<br>


<table>
<caption>パラメータ</caption>
<tr bgcolor="#cccccc">
<th>パラメータ</th>	<th>説明</th>
</tr><tr>
<td>schema_name</td>	<td>定義、または削除するスキーマ名</td>
</tr><tr>
<td>owner</td>	<td>スキーマの所有者名</td>
</tr><tr>
<td>schema_element</td>	<td>スキーマ内に設定するオブジェクトの定義。[<表6-04>]参照</td>
</tr><tr>
<td>new_schemaname</td>	<td>新しいスキーマ名</td>
</tr><tr>
<td>new_owner</td>	<td>新しい所有者名</td>
</tr></table>

<br>

<table>
<caption>オプション</caption>
<tr bgcolor="#cccccc">
<th>オプション</th>	<th>説明</th>
</tr><tr>
<td>CASCADE</td>	<td>依存するオブジェクト(テーブル、ビュー、制約など)も一緒に削除</td>
</tr><tr>
<td>RESTRICT</td>	<td>依存するオブジェクトが存在しないスキーマの場合のみ、削除</td>
</tr><tr>
<td>IF EXISTS</td>	<td>作成または削除するスキーマが存在しなくともエラーにならない</td>
</tr></table>

<br>


%CHAPTER 解説


<p>
・書式
<br>
スキーマを考慮したオブジェクトの書式は以下のとおりです。
</p>

[<書式>]
<pre>
スキーマ名 . オブジェクト名
</pre>
<br>

<p>
例として、スキーマmy_schemaにテーブルsample_tableを定義し、問い合わせを実行します。
</p>

<pre>
sampledb=# CREATE SCHEMA my_schema;
CREATE SCHEMA

sampledb=# CREATE TABLE my_schema.sample_table (id integer, data text);
CREATE TABLE

sampledb=# INSERT INTO my_schema.sample_table
sampledb-#       VALUES (1, 'これはschemaのテストです');
INSERT 0 1
sampledb=# SELECT * FROM my_schema.sample_table;
 id |          data
----+--------------------------
  1 | これはschemaのテストです
(1 row)
</pre>
<br>


<p>
明示的にスキーマ名を指定しない場合、設定パラメータsearch_pathに設定したスキーマを順に検索し、最初にみつかったオブジェクトを選択します。
</p>

<p>
・アクセス権限
<br>
スキーマの作成者(所有者)は、そのスキーマ内のすべてのオブジェクトにアクセスできますが、それ以外のロールがアクセスするには、スキーマとオブジェクト両方のアクセス権限が必要です。
<br>
ロールがスキーマに対してアクセス権限を持つか否かは、
関数has_schema_privilege()でわかります(<a href="./func-10.html">[<7-29>]</a>参照)。
</p>

<p>
例えば、ロールwebuserがスキーマmy_schemaのテーブルsample_tableにアクセスするには、次のアクセス権限設定が必要です。
</p>

<pre>
sampledb=# GRANT USAGE ON SCHEMA my_schema TO webuser;
GRANT
sampledb=# GRANT SELECT ON TABLE sample_table TO webuser;
GRANT
</pre>
<br>

<p>
・CASCADE
<br>
スキーマを削除するときにCASCADEを設定すると、スキーマに属するテーブルやビューなど、依存するすべてのオブジェクトも一緒に削除します。
<p>


<p>
・スキーマに関する関数とメタコマンド
<br>
関数current_schema()で現在のスキーマを表示できます。
関数current_schemas()で検索パス内のすべてのスキーマ名がわかります(<a href="./func-09.html">[<7-28>]</a>参照)。
存在するスキーマのリストはメタコマンド\dn(<a href="./psql-06.html">[<5-06>]</a>参照)で表示できます。
</p>

<pre>
sampledb=# SELECT current_schema();
 current_schema
----------------
 public
(1 row)

sampledb=# SELECT current_schemas(true);
   current_schemas
---------------------
 {pg_catalog,public}
(1 row)

sampledb=# \dn
        List of schemas
        Name        |  Owner
--------------------+----------
 information_schema | postgres
 pg_catalog         | postgres
 pg_toast           | postgres
 pg_toast_temp_1    | postgres
 public             | postgres
(5 rows)
</pre>
<br>

<p>
・スキーマとオブジェクトの同時定義
<br>
スキーマの定義と同時に、テーブル、ビューなどのオブジェクトを定義できます([<表6-04>]参照)。
</p>

<table border=1>
<caption>[<表6-04>] スキーマ定義時に設定できる定義</caption>
<tr bgcolor="#cccccc">
<th>設定可能なSQL文</th>
</tr><tr>
<td>CREATE TABLE, CREATE VIEW, GRANT, CREATE INDEX, CREATE SEQUENCE, CREATE TRIGGER</td>
</tr></table>
<br>

<p>
実例を示します。
<br>
スキーマyours_chema、およびテーブルyour_tableを同時に定義します。
同時に定義する場合、SQL文を連続して記述します。';'で区切る必要はありません。
</p>

<pre>
sampledb=# CREATE SCHEMA your_schema
sampledb-# CREATE TABLE your_table (id integer, data text);
CREATE SCHEMA
sampledb=# \d your_schema.your_table
     Table "your_schema.your_table"
 Column |   Type  | Modifiers
--------+---------+-----------
 id     | integer |
 data   | text    |
</pre>
<br>

%CHAPTER スキーマのサーチパス:search_path

<p>
サーチパスは設定パラメータsearch_pathに設定します。
デフォルトは'$user,public'です。
これは、接続中のデータベースユーザ名($user)と同名のスキーマと、publicスキーマ内のオブジェクトのみ検索することを意味します。
よって\dtや\zなどのメタコマンドで表示されるオブジェクトは、スキーマ$userとpublic内のものに限られます。
</p>

<p>
他のスキーマのオブジェクトに関する情報を得るには、サーチパスsearch_pathに必要なスキーマ名を加えます。
例えば、(ロールpostgresの場合)デフォルトでは、スキーマpostgresとpublicのテーブルしか表示されませんが、
設定パラメータsearch_pathに'my_schema'を追加するとスキーマmy_schemaのテーブル情報も表示されます。
</p>

<pre>
sampledb=# -- デフォルトのサーチパスで全テーブルを表示
sampledb=# \d
            List of relations
 Schema   |     Name    |    Type  | Owner
----------+-------------+----------+----------
 postgres | sample      | table    | postgres
 public   | member_list | table    | postgres
 public   | my_class    | table    | postgres
(3 rows)

sampledb=# SHOW search_path;
 search_path
--------------
"$user",public
(1 row)

sampledb=# -- サーチパスにmy_schemaを追加
sampledb=# SET search_path = postgres,public,my_schema;
SET

sampledb=# SHOW search_path;
         search_path
-----------------------------
 postgres, public, my_schema
(1 row)

sampledb=# -- スキーマmy_schemaのテーブルsample_table表示された
sampledb=# \d
            List of relations
  Schema   |      Name     | Type  |  Owner
-----------+---------------+-------+----------
 my_schema | sample_table  | table | postgres
 postgres  | sample        | table | postgres
 public    | member_list   | table | postgres
 public    | my_class      | table | postgres
(4 rows)
</pre>
<br>

