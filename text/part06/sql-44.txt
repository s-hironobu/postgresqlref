%FILE internal/sql-44.html
%LASTMOD
%KEY pgsql-sql44

%TITLE <a href="https://www.postgresql.org/docs/current/sql-lock.html" target="_blank" rel="noopener noreferrer">ロック	LOCK</a>

<pre>
[<書式>]

LOCK [ TABLE ] table_name [, ...] [ IN lockmode MODE ] [ NOWAIT ]

</pre>
<br>


<table>
<caption>パラメータ</caption>
<tr bgcolor="#cccccc">
<th>パラメータ</th>	<th>説明</th>
</tr><tr>
<td>table_name</td>	<td>ロックをかけるテーブル名</td>
</tr></table>

<br>


<table>
<caption>lockmode</caption>
<tr bgcolor="#cccccc">
<th>lockmode</th>	<th>説明</th>
</tr><tr>
<td>ACCESS SHARE</td>	<td>最も制限の弱いロックモード。ACCESS EXCLUSIVEとのみ競合</td>
</tr><tr>
<td>ROW SHARE</td>	<td>個々のレコードについて共有ロックをかける</td>
</tr><tr>
<td>ROW EXCLUSIVE</td>	<td>特定のレコードの更新に関してのみ排他ロックをかける</td>
</tr><tr>
<td>SHARE UPDATE EXCLUSIVE</td>	<td>スキーマの変更と、VACUUM文の同時実行からテーブルを保護</td>
</tr><tr>
<td>SHARE</td>	<td>テーブル全体に対し共有ロックをかける</td>
</tr><tr>
<td>SHARE ROW EXCLUSIVE</td>	<td>同時1個のトランザクションのみ取得可能。すべての'SELECT...FOR UPDATE'文をブロックする</td>
</tr><tr>
<td>EXCLUSIVE</td>	<td>排他ロックをかける</td>
</tr><tr>
<td>ACCESS EXCLUSIVE</td>	<td>最も制限の強いロックモード。同時に起こるすべての操作からテーブルを保護</td>
</tr></table>

<br>

<table>
<caption></caption>
<tr bgcolor="#cccccc">
<th>オプション</th>	<th>説明</th>
</tr><tr>
<td>NOWAIT</td>	<td>ロックが競合した場合、ブロックせずにすぐにエラーを返す</td>
</tr></table>

<br>


%CHAPTER 解説

<p>
LOCK文で明示的にロックをかけます。
LOCK文はトランザクションブロック内でのみ有効です。
トランザクションが終了するとロックが解除されます。
</p>


<p>
他のトランザクションが先にテーブルをロックすると、
(ロックが競合している場合は)そのテーブルにアクセスしようとしてもブロックされ続けます。
<br>
際限なく待ち続けることができない場合は、
バージョン9.3でサポートされた設定パラメータlock_timeoutに値を最大の待ち時間を設定するとよいでしょう。
SQL文がブロックされた時間がlock_timeoutを越えると、そのSQL文がエラーを返してブロック状態から抜け出ることができます。
</p>

<p>
テーブルtestに対してLOCKをかけた後、他のトランザクションでの挙動を簡単に示します。
</p>

<pre>
sampledb=# BEGIN;
BEGIN
sampledb=# LOCK test;
LOCK TABLE
</pre>
<br>

<p>
はじめにlock_timeoutを無効(0)のまま、別ターミナルから別トランザクションを開いてテーブルtestにアクセスします。
先のLOCK文で既にテーブルtestがロックされているので、そのロックが解除されるまでブロックされ続けます。
</p>

<pre>
sampledb=# BEGIN;
BEGIN
sampledb=# SELECT count(*) FROM test;

... 先のLOCK文が終了するまでブロックされ続ける ...
</pre>
<br>

<p>
次に別ターミナルからlock_timeoutに10000[ms]設定し、
別のトランザクションを開いてテーブルtestにアクセスします。
lock_timeoutだけ待ってもLOCKが終了しない場合はSELECT文はERRORを返して終了します。
</p>


<pre>
sampledb=# SET lock_timeout = 10000; -- 10000ms = 10s
SET
sampledb=# BEGIN;
BEGIN
sampledb=# SELECT count(*) FROM test;

... 10000ms 経過後 ...

ERROR:  canceling statement due to lock timeout
LINE 1: SELECT count(*) FROM test;
                             ^
</pre>
<br>

%SECTION ロックモード

<p>
PostgreSQLが提供する8つのロックモードを示します([<表6-12>])。
これらは、(1つの例外を除き)[<表6-11>]のモードを組み合わせたものです。
</p>

<table border=1>
<caption>[<表6-11>] モード一覧</caption>
<tr bgcolor="#cccccc">
<th>モード</th>		<th>機能</th>
</tr><tr>
<td>EXCLUSIVE</td>	<td>排他ロック。他の同種のロックをかけることを防止</td>
</tr><tr>
<td>SHARE</td>	<td>共有ロック。他の同種のロックをかけることを許す</td>
</tr><tr>
<td>ACCESS</td>	<td>テーブルロック</td>
</tr><tr>
<td>ROW	</td>	<td>行(レコード)ロック</td>
</tr></table>

<br>

<p>
例えば、ROW EXCLUSIVEモードは"排他的な行ロック"です。
</p>

%SECTION ロックの競合

<p>
ロックモード間の競合(Conflict)関係の一覧を[<表6-12>]に示します。
</p>


<table border=1>
<caption>[<表6-12>] ロックモード間の競合関係</caption>
<tr bgcolor="#cccccc">
<th>		</th>	<th>ACCESS_SHARE</th><th>ROW_SHARE</th><th>ROW_EXCLUSIVE</th><th>SHARE_UPDATE_EXCLUSIVE</th><th>SHARE</th><th>SHARE_ROW_EXCLUSIVE</th><th>EXCLUSIVE</th><th>ACCESS_EXCLUSIVE</th>
</tr><tr>
<td>ACCESS SHARE</td>	<td>×</td>	<td>×	</td>	<td>×	</td>	<td>×	</td>	<td>×	</td>	<td>×	</td>	<td>×	</td>	<td>○</td>
</tr><tr>
<td>ROW SHARE</td>	<td>×	</td>	<td>×	</td>	<td>×	</td>	<td>×	</td>	<td>×	</td>	<td>×	</td>	<td>○	</td>	<td>	○</td>
</tr><tr>
<td>ROW EXCLUSIVE</td>	<td>×	</td>	<td>×	</td>	<td>×	</td>	<td>×	</td>	<td>○</td>	<td>	○	</td>	<td>	○	</td>	<td>○	</td
</tr><tr>
<td>SHARE UPDATE EXCLUSIVE</td>	<td>×	</td>	<td>×	</td>	<td>×	</td>	<td>○	</td>	<td>	○</td>	<td>	○</td>	<td>		○</td>	<td>		○ </td
</tr><tr>
<td>SHARE</td>		<td>×	</td>	<td>×	</td>	<td>○	</td>	<td>○	</td>	<td>×	</td>	<td>○ </td>	<td>○ </td>	<td>○ </td>
</tr><tr>
<td>SHARE ROW EXCLUSIVE</td>	<td>×	</td>	<td>	×	</td>	<td>	○</td>	<td>		○</td>	<td>			○</td>	<td>	○	</td>	<td>		○</td>	<td>		○</td>
</tr><tr>
<td>EXCLUSIVE</td>	<td>	×	</td>	<td>	○	</td>	<td>	○</td>	<td>		○</td>	<td>			○</td>	<td>	○</td>	<td>			○</td>	<td>		○ </td>
</tr><tr>
<td>ACCESS EXCLUSIVE</td>	<td>	○</td>	<td>		○</td>	<td>		○	</td>	<td>	○	</td>	<td>		○</td>	<td>	○	</td>	<td>		○	</td>	<td>	○</td>
</tr></table>


<br>

<p>
具体例で[<表6-12>]の見方を説明します。
</p>

<p>
(1)ロックが競合しない例(EXCLUSIVEとACCESS SHARE)
</p>
<blockquote>
<p>
ACCESS SHAREモードは、ACCESS EXCLUSIVEモードとのみ競合します。
<br>
例えば、テーブルにロックがかかっていても、そのロックがACCESS EXCLUSIVEモード以外ならば、ブロックされることなくそのテーブルにACCESS SHAREモードのロックをかけることができます。
</p>
</blockquote>

(2)ロックが競合する例
<blockquote>
<p>
ROW EXCLUSIVEモードはSHARE、SHARE ROW EXCLUSIVE、EXCLUSIVE、ACCESS EXCLUSIVEモードと競合します。
<br>
例えば、セッションAでEXCLUSIVEモードをかけられたテーブルに対して、セッションBでROW EXCLUSIVEモードのロックをかけようしても、セッションA の(EXCLUSIVEモードの)ロックが終了するまで、LOCK文の実行がブロックされます(待たされる)。
</p>
</blockquote>


%SECTION  NOWAITオプション
<p>
NOWAITオプションを設定すると、ロックが競合した場合、ブロックされずすぐにエラーが返ります。
</p>
