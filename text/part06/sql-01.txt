%FILE internal/sql-01.html
%LASTMOD
%KEY pgsql-sql01

%TITLE SQL語彙

<p>
・ SQL文
<br>
SQL文は一連のトークンで構成され、セミコロン';'で終わります。
</p>
[< SQL文の例>]
<pre>
SELECT * FROM table;
DELETE FROM table WHERE id = 1;
</pre>
<br>

<p>
・ トークン
<br>
トークンはキーワード、識別子、引用符で囲まれた識別子、リテラル(もしくは定数)、特別な文字シンボルのいずれかです。
トークンは通常、空白文字(スペース、タブ、改行)で区切ります。
</p>

<p>
・ キーワードと識別子
<br>
キーワードはSQL言語で定義された単語です。
'SELECT'、'DELETE'などはキーワードの例です。
</p>
<p>
識別子はテーブル、カラム、データベースオブジェクトの名前のことです。
</p>
キーワードと識別子の最初の文字はアルファベット[A..z]かアンダースコア'_'でなければなりません。
続く文字はアルファベット、数字[0〜9]、アンダースコアが使えます。
識別子の文字長は最大で63文字です。
<br>
<u>キーワードと識別子は大文字と小文字を区別しません</u>。
ただし<u>二重引用符'"'で囲まれた識別子は大文字と小文字を区別します</u>。
</p>

<p>
・ 大文字小文字
<br>
キーワードと識別子は大文字小文字を混ぜて記述できます。
識別子は二重引用符'"'で括っていない限り、暗黙的に小文字に変換します。
<br>
例えば、テーブル名は識別子の一種なので大文字小文字を区別せず、よって次に示すいずれのSQL文もテーブルsample_tblに作用します。
</p>
<pre>
sampledb=# -- どちらもテーブルsample_tblを更新する
sampledb=# UPDATE FROM sample_tbl SET data = data + $1;
sampledb=# UPDATE FROM Sample_TBL SET data = data + $1;
</pre>
<br>

<p>
しかしテーブル名を二重引用符'"'で囲むと、記述したとおりの名前(Sample_TBL)に作用します。
</p>

<pre>
sampledb=# --  テーブルSample_TBLを更新する
sampledb=# UPDATE FROM "Sample_TBL" SET data = data + $1;
</pre>
<br>

<p>
・　文字列定数
<br>
SQLの文字列定数は、任意の文字の並びを単一引用符(')で囲んだものです。
</p>

<pre>
'example'
'this is a pen.'
'これは文字列定数です。'
</pre>
<br>

<p>
単一引用符(')を文字列定数に含めるには、単一引用符を2つ続けるか、バックスラッシュ'\'とともに記述します。例えば次の場合、どちらも「Tom's Dinner」という文字列を表します。
</p>

<pre>
'Tom''s Dinner'
'Tom\'s Dinner'
</pre>
<br>

<p>
[<表6-01>]の(C言語形式の)バックスラッシュコマンドも有効です。
</p>

<table border=1>
<caption>[<表6-01>] バックスラッシュコマンド</caption>
<tr bgcolor="#cccccc">
<th>バックスラッシュコマンド</th>	<th>説明</th>
</tr><tr>
<td>\b	</td>	<td>バックスペース</td>
</tr><tr>
<td>\f	</td>	<td>改ページ</td>
</tr><tr>
<td>\n		</td>	<td>改行</td>
</tr><tr>
<td>\r		</td>	<td>キャリッジリターン</td>
</tr><tr>
<td>\t		</td>	<td>タブスペース</td>

</tr><tr>
<td>\o, \oo, \ooo (oは0-7の整数)</td>	<td>8進数バイト値</td>

</tr><tr>
<td>\xh, \xhh (hは0-9,A-F)</td>	<td>16進数バイト値</td>

</tr><tr>
<td>\uxxxx, \Uxxxxxxxx	(xは0-9,A-F)</td>	<td>16もしくは32ビットの16進数Unicode文字</td>

</tr></table>

<br>

<p>
これ以外のバックスラッシュに続く文字は、文字どおりに解釈します。
またバックスラッシュ'\'を表示するには、'\ \'と表記します。
</p>

<p>
・ ドル引用符付けされた文字列定数
<br>
文字列定数の囲み記号として、連続した2つのドル記号'$$'を使います。
書式は以下のとおりです。
</p>

[<書式>]
<pre>
     $$文字列$$
     $タグ$文字列$タグ$
</pre>
※ タグ = アルファベットと数字[A-z0-9]からなる、任意の文字列

<br>
<p>
ドル引用符を使って、上記の文字列定数を書き直したものを示します。
</p>

<pre>
$$example$$
$TAG$example$TAG$

$$this is a pen.$$
$tg1$this is a pen.$tg1$

$$これは文字列定数です。$$
$tag$これは文字列定数です。$tag$

$$Tom's Dinner$$
</pre>
<br>

<p>
・ 特殊文字
<br>
PostgreSQLで使える特殊文字を示します。
</p>

<pre>
$ () [] , ; : * .
</pre>
<br>

<p>
いくつかの特殊文字について説明します。
</p>

<ul>

<li>直後に数字が続くドル記号'$'</li>
<p>
$1, $2 など、直後に数字が続くドル記号$は、関数の引数を表す。
</p>


<li>大かっこ'[', ']'とコロン':' </li>
<p>
大かっこ'[', ']'は、配列要素を選択するために使う。
コロン':'は、配列要素を取り出すために使う。
</p>

<li>セミコロン ';'</li>
<p>
セミコロン';'はSQL文の終わりを意味する。
</p>

<li> ピリオド'.'</li>
<p>
ピリオド'.' は浮動小数定数、テーブルとカラム名を区切るために使う。
</p>

</ul>

<p>
・ コメント
<br>
2種類のコメントがあります。
</p>

<ol>
<li>ラインコメント</li>
<p>
二重のダッシュ記号'--'があると、そこからその行の終りまでがコメントになる。
</p>

<li>ブロックコメント</li>
<p>
/* と */で囲まれた部分がコメントブロックになる。SQL文でのブロックコメントはネスト(入れ子)できる。
</li>
</ol>

<p>
コメントの例を示します。
</p>

<pre>
sampledb=# -- ラインコメントの例
sampledb=# /* ブロックコメントの例
sampledb*#    /* ネストしたブロックコメント */
sampledb*# */  ;
</pre>
<br>
