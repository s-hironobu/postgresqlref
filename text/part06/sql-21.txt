%FILE internal/sql-21.html
%LASTMOD
%KEY pgsql-sql21


%TITLE <a href="https://www.postgresql.org/docs/current/sql-select.html#SQL-WITH" target="_blank" rel="noopener noreferrer">共通テーブル式(CTE: Common Table Expression)と再帰問い合わせ</a> / <a href="https://www.postgresql.org/docs/current/queries-with.html" target="_blank" rel="noopener noreferrer">WITH Queries </a>

<pre>
[<書式>]

[ WITH [ RECURSIVE ] with_query [, ...] ]


・with_query
	with_query_name [ ( column_name [, ...] ) ] AS [ [ NOT ] MATERIALIZED ]
	( select | values | insert | update | delete )
	[ SEARCH { BREADTH | DEPTH } FIRST BY column_name [, ...] SET search_seq_col_name ]
	[ CYCLE column_name [, ...] SET cycle_mark_col_name
	[ TO cycle_mark_value DEFAULT cycle_mark_default ] USING cycle_path_col_name ]
</pre>

<br>

<table>
<caption>パラメータ</caption>
<tr bgcolor="#cccccc">
<th>パラメータ</th>	<th>説明</th>
</tr><tr>
<td>with_query_name</td>	<td>共通テーブル式の名前</td>
</tr><tr>
<td>column_name</td>	<td>共通テーブル式のカラム名</td>
</tr></table>

<br>

<table>
<caption>オプション</caption>
<tr bgcolor="#cccccc">
<th>オプション</th>	<th>説明</th>
</tr><tr>
<td>RECURSIVE</td>	<td>再帰的にWITH句を実行する</td>
</tr><tr>
<td>MATERIALIZED</td>	<td></td>
</tr></table>

<br>


<table>
<caption>句</caption>
<tr bgcolor="#cccccc">
<th>句</th>	<th>説明</th>
</tr><tr>
<td>CYCLE</td>	<td><font color="#0000ff">使わなければならなくなったら調べる。今は無視。多分一生使わない。</font></td>
</tr><tr>
<td>SEARCH</td>	<td><font color="#0000ff">使わなければならなくなったら調べる。</font></td>
</tr></table>

<br>

%CHAPTER 解説


<p>
バージョン8.4で共通テーブル式(CTE:Common Table Expression)と再帰問い合わせがサポートされました。
これらはSQL99で定義されています。
</p>

<p>
WITH句に問い合わせを記述して共通テーブル式とし、SELECT文本体で２度３度と呼び出すことができます。
同じサブクエリを何度も使わなければならないSELECT文など、記述を単純化できます。
</p>

<p>
例を示します。
<br>
最初のSELECT文は同じサブクエリを２度繰り返して記述しています。
<br>
二番目のSELECT文はWITH句で共通するサブクエリを括り出し、記述を多少単純化しています。
</p>

<pre>
sampledb-# -- WITH句を使わずに記述した例
sampledb=# SELECT p1.item, p1.cost * o1.odr AS sales FROM orderlist_1 AS o1,
sampledb-#     (SELECT item, cost FROM product_list WHERE 100 < cost) AS p1
sampledb-#     WHERE o1.item = p1.item
sampledb-# UNION ALL
sampledb-# SELECT p2.item, p2.cost * o2.odr AS sales FROM orderlist_2 AS o2,
sampledb-#     (SELECT item, cost FROM product_list WHERE 100 < cost) AS p2
sampledb-#     WHERE o2.item = p2.item

sampledb=# -- WITH句で書き換えた例
sampledb=# WITH p AS (
sampledb(#    SELECT item, cost FROM product_list WHERE 100 < cost
sampledb(# )
sampledb-# SELECT p.item, p.cost * o1.odr AS sales FROM orderlist_1 AS o1, p
sampledb-#     WHERE o1.item = p.item
sampledb-# UNION ALL
sampledb-# SELECT p.item, p.cost * o2.odr AS sales FROM orderlist_2 AS o2, p
sampledb-#     WHERE o2.item = p.item
</pre>
<br>

<p>
なお、共通テーブル式は最初に一度だけ評価します。
</p>

<pre>
sampledb=# WITH rand AS (SELECT random())
sampledb-#     SELECT * FROM rand UNION ALL SELECT * FROM rand;
      random
------------------
 0.53451169282198
 0.53451169282198
(2 rows)
</pre>
<br>

<p>
・再帰問い合わせ
<br>
RECURSIVEオプションをつけると再帰問い合わせを記述できます。
再帰問い合わせは従業員リストや部品表など階層構造をもつデータを扱う場合に便利です。
<br>
再帰処理は、停止条件がなければ無限に繰り返すので注意してください。
</p>

<p>
具体例を示します。
<br>
テーブルempは従業員名とID、および上司のIDを保存しています。
再帰問い合わせで従業員の階層を明示的に表示できます。
</p>

<pre>
sampledb=# SELECT * FROM emp;
 ename  | empno | mgr
--------+-------+-----
 Alice  |     1 |
 Bobby  |     2 |   1
 Candy  |     3 |   1
 Duke   |     4 |   1
 Eddie  |     5 |   2
 Freddy |     6 |   3
 George |     7 |   1
 Henry  |     8 |   3
 Isaac  |     9 |   5
(9 rows)

sampledb=# WITH RECURSIVE r(level, employee, empno, mgr) AS (
sampledb(#    SELECT 1, ename, empno, mgr
sampledb(#      FROM emp WHERE mgr IS NULL
sampledb(#  UNION ALL
sampledb(#    SELECT r.level + 1, repeat('  ', r.level)
sampledb(#                      || emp.ename, emp.empno, emp.mgr
sampledb(#      FROM emp, r WHERE emp.mgr = r.empno
sampledb(#  )
sampledb-#  SELECT * FROM r;
 level |  employee   | empno | mgr
-------+-------------+-------+-----
     1 | Alice       |     1 |
     2 |   Bobby     |     2 |   1
     2 |   Candy     |     3 |   1
     2 |   Duke      |     4 |   1
     2 |   George    |     7 |   1
     3 |     Eddie   |     5 |   2
     3 |     Freddy  |     6 |   3
     3 |     Henry   |     8 |   3
     4 |       Isaac |     9 |   5
(9 rows)
</pre>
<br>
