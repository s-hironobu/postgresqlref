%FILE internal/sql-06.html
%LASTMOD
%KEY pgsql-sql06

%TITLE テーブル定義の継承とLIKE句


%CHAPTER テーブル定義の継承


<p>
テーブル定義の継承はPostgreSQLの独自機能です。
</p>

<p>
実例を示します。テーブルheadoffice_membersは本社メンバーを保存します。
</p>

<pre>
sampledb=# \d headoffice_members
Table "public.headoffice_members"
 Column |  Type   | Modifiers
--------+---------+-----------
 id     | integer |
 name   | text    |
Number of child tables: 2 (Use \d+ to list them.)

sampledb=# INSERT INTO headoffice_members VALUES(1, 'Alice'), (2, 'Bob');
INSERT 0 2
</pre>
<br>

<p>
親テーブルheadoffice_membersを継承して、支店のテーブルeast_branch_membersとwest_branch_membersを作成します。
<br>
カラムidとnameは共通で、必要ならカラムを追加できます(この例ではカラムjob)。
</p>

<pre>
sampledb=# CREATE TABLE east_branch_members (job text) INHERITS (headoffice_members);
CREATE TABLE
sampledb=# CREATE TABLE west_branch_members (job text) INHERITS (headoffice_members);
CREATE TABLE

sampledb=# \d east_branch_members
Table "public.east_branch_members"
 Column |  Type   | Modifiers
--------+---------+-----------
 id     | integer |
 name   | text    |
 job    | text    |
Inherits: headoffice_members
</pre>
<br>

<p>
この例では親テーブルheadoffice_membersのすべてのカラムを継承しましたが、必要なカラムのみ継承することもできます。
<br>
<u>継承で作成したテーブルには、親テーブルのCHECK制約とNOT NULL制約およびDEFAULT値が引き継がれます</u>(UNIQUE制約、外部キー制約は引き継がれない)。
</p>


<p>
各支店にメンバーを登録して、テーブル検索した結果を示します。
</p>

<pre>
sampledb=# INSERT INTO east_branch_members VALUES(10, 'Candy', 'Engineer'),
sampledb-#                                       (11, 'Duke', 'Engineer');
INSERT 0 2

sampledb=# SELECT * FROM east_branch_members;
 id | name  |   job
----+-------+----------
 10 | Candy | Engineer
 11 | Duke  | Engineer
(2 rows)

sampledb=# INSERT INTO west_branch_members VALUES(20, 'Eric', 'Designer'),
sampledb-#                                       (21, 'Freddy', 'Singer');
INSERT 0 2

sampledb=# SELECT * FROM west_branch_members;
 id |  name  |   job
----+--------+----------
 20 | Eric   | Designer
 21 | Freddy | Singer
(2 rows)
</pre>
<br>

<p>
ここで親テーブルheadoffice_membersを検索すると、各支店のメンバーも含めて全メンバーを表示します。
このように、<u>継承したテーブルのデータは、親テーブルからも操作(SELECT, UPDATE, DELETE)できてしまう</u>。
</p>

<pre>
sampledb=# SELECT * FROM headoffice_members;
 id |  name
----+--------
  1 | Alice
  2 | Bob
 10 | Candy
 11 | Duke
 20 | Eric
 21 | Freddy
(6 rows)
</pre>
<br>


<p>
親テーブルが子テーブルのデータを操作しないようにするには、次の2つの方法があります。
</p>

<ol>
<li>キーワード"ONLY"を設定する</li>
<li>設定パラメータsql_inheritanceを無効にする</li>
<p>
設定パラメータsql_inheritanceにfalseをoff、もしくはSET sql_inheritance TO off 文を実行する。
</p>
</ol>


<p>
例えばSELECTの場合、次のようにすると親テーブルのもともとのデータのみ表示します。
</p>

<pre>
sampledb=# SELECT * FROM ONLY headoffice_members;
 id | name
----+-------
  1 | Alice
  2 | Bob
(2 rows)
</pre>
<br>

<p>
UPDATE、DELETEも同様です。
</p>



%CHAPTER LIKE句

<p>
LIKE句で既存のテーブル定義から新しいテーブルを作成できます。
既存テーブルの全てのカラム名とデータ型、および非NULL制約が流用されます。
</p>

<p>
継承(INHERIT)との違いは、
<u>テーブル定義のみ行い、親テーブルとの関連が一切ない</u>ということです。
</p>
<p>
デフォルト値やインデックスなどは明示的にオプションで指定しなければなりません。
バージョンによって流用できる範囲が異なります。
</p>


<pre>
[<書式>]

LIKE parent_table { INCLUDING | EXCLUDING }
	 { COMMENTS | COMPRESSION | CONSTRAINTS | DEFAULTS | GENERATED | IDENTITY | INDEXES | STATISTICS | STORAGE | ALL }

</pre>
<br>

<table>
<tr bgcolor="#cccccc">
<th>パラメータ</th>	<th>説明</th>
</tr><tr>
<td>parent_table</td>		<td>テーブル定義を流用する親テーブル名</td>
</tr></table>

<br>

<table>
<tr bgcolor="#cccccc">
<th>オプション</th>	<th>説明</th>
</tr><tr>
<td>{INCLUDING | EXCLUDING} COMMENTS</td>	<td>親テーブルのコメントをコピーするか否か。</td>
</tr><tr>
<td>{INCLUDING | EXCLUDING} COMPRESSION</td>	<td>親テーブルの圧縮方法をコピーするか否か。</td>
</tr><tr>
<td>{INCLUDING | EXCLUDING} CONSTRAINTS</td>	<td>親テーブルの制約条件をコピーするか否か。</td>
</tr><tr>
<td>{INCLUDING | EXCLUDING} DEFAULTS</td>	<td>親テーブルのデフォルト値をコピーするか否か。</td>

</tr><tr>
<td>{INCLUDING | EXCLUDING} GENERATED</td>	<td>親テーブルのGENERATEDカラムをコピーするか否か。GENERATEDカラムについては<a href="https://www.postgresql.org/docs/current/ddl-generated-columns.html" target="_blank" rel="noopener noreferrer">Generated Columns</a>を参照</td>
</tr><tr>
<td>{INCLUDING | EXCLUDING} IDENTITY</td>	<td>親テーブルのシーケンスのIDENTITY設定を引き継ぐか否か。</td>

</tr><tr>
<td>{INCLUDING | EXCLUDING} INDEXES</td>	<td>親テーブルのインデックスをコピーするか否か。</td>
</tr><tr>
<td>{INCLUDING | EXCLUDING} STATISTICS</td>	<td>拡張統計情報をコピーするか否か。</td>
</tr><tr>
<td>{INCLUDING | EXCLUDING} STORAGE</td>	<td>親テーブルのストレージパラメータをコピーするか否か。</td>
</tr><tr>
<td>INCLUDING ALL	</td>			<td>上のすべての条件を含めてコピーする。</td>
</tr></table>

<br>

<p>
例を示します。
</p>

<p>
テーブルcustomerlistを親テーブルとして、新たにテーブルcustomerlist_exclude_defaultを作成します。
<br>
テーブルcustomerlist_exclude_defaultの定義は、
新規のカラムnew_idと親テーブルcustomerlistの定義を組み合わせたもので、
親テーブルのカラム名とデータ型、および'NOT NULL'制約のみ引き継ぎます。
</p>

<pre>
sampledb=# \d customerlist
            Table "public.customerlist"
   Column    |  Type   |         Modifiers
-------------+---------+---------------------------
 id          | integer | not null default 0
 name        | text    | not null default ''::text
 companycode | integer | not null default -1


sampledb=# CREATE TABLE customerlist_excluding_default
sampledb-#     (new_id int, LIKE customerlist);
CREATE TABLE

sampledb=# \d customerlist_excluding_default
Table "public.customerlist_excluding_default"
   Column    |  Type   | Modifiers
-------------+---------+-----------
 new_id      | integer |
 id          | integer | not null
 name        | text    | not null
 companycode | integer | not null
</pre>
<br>

<p>
ここでデフォルト値も引き継ぐには、LIKE句に'INCLUDING DEFAULT'オプションを設定します。
</p>

<pre>
sampledb=# CREATE TABLE customerlist_including_default
sampledb-#     (new_id int, LIKE customerlist INCLUDING DEFAULTS);
CREATE TABLE

sampledb=# \d customerlist_including_default
    Table "public.customerlist_including_default"
   Column    |  Type   |         Modifiers
-------------+---------+---------------------------
 new_id      | integer |
 id          | integer | not null default 0
 name        | text    | not null default ''::text
 companycode | integer | not null default -1
</pre>
<br>

<p>
レアケースだが、親テーブルがGENERATED AS IDENTITYでシーケンスを設定している場合、明示的に"INCLUDING IDENTITY"を設定しないとシーケンスが自動設定されません。
</p>

<pre>
postgres=# CREATE TABLE a1 (id int, seq bigint GENERATED ALWAYS AS IDENTITY);
CREATE TABLE

postgres=# CREATE TABLE a1_include_identity (new_id int, LIKE a1 INCLUDING IDENTITY);
CREATE TABLE

postgres=# CREATE TABLE a1_exclude_identity (new_id int, LIKE a1 EXCLUDING IDENTITY);
CREATE TABLE

postgres=# INSERT\ds
                    List of relations
 Schema |            Name             |   Type   | Owner
--------+-----------------------------+----------+--------
 public | a1_include_identity_seq_seq | sequence | ubuntu
 public | a1_seq_seq                  | sequence | ubuntu
(2 rows)

postgres=# INSERT INTO a1_include_identity VALUES (1,1);
INSERT 0 1

postgres=# INSERT INTO a1_exclude_identity VALUES (1,1);
ERROR:  null value in column "seq" of relation "a1_exclude_identity" violates not-null constraint
DETAIL:  Failing row contains (1, 1, null).

postgres=# \d+ a1
                                                      Table "public.a1"
 Column |  Type   | Collation | Nullable |           Default            | Storage | Compression | Stats target | Description
--------+---------+-----------+----------+------------------------------+---------+-------------+--------------+-------------
 id     | integer |           |          |                              | plain   |             |              |
 seq    | bigint  |           | not null | generated always as identity | plain   |             |              |
Access method: heap

postgres=# \d+ a1_include_identity
                                             Table "public.a1_include_identity"
 Column |  Type   | Collation | Nullable |           Default            | Storage | Compression | Stats target | Description
--------+---------+-----------+----------+------------------------------+---------+-------------+--------------+-------------
 new_id | integer |           |          |                              | plain   |             |              |
 id     | integer |           |          |                              | plain   |             |              |
 seq    | bigint  |           | not null | generated always as identity | plain   |             |              |
Access method: heap

postgres=# \d+ a1_exclude_identity
                                   Table "public.a1_exclude_identity"
 Column |  Type   | Collation | Nullable | Default | Storage | Compression | Stats target | Description
--------+---------+-----------+----------+---------+---------+-------------+--------------+-------------
 new_id | integer |           |          |         | plain   |             |              |
 id     | integer |           |          |         | plain   |             |              |
 seq    | bigint  |           | not null |         | plain   |             |              |
Access method: heap
</pre>
<br>
