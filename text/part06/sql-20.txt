%FILE internal/sql-20.html
%LASTMOD
%KEY pgsql-sql20

%TITLE <a href="https://www.postgresql.org/docs/current/sql-select.html#SQL-WINDOW" target="_blank" rel="noopener noreferrer">WINDOW句、OVER句</a> / <a href="https://www.postgresql.org/docs/current/queries-table-expressions.html#QUERIES-WINDOW" target="_blank" rel="noopener noreferrer">Window Function Processing</a>


<pre>
[<書式>]

● WINDOW句
WINDOW window_name AS ( window_definition ) [, ...]

● OVER句
unction_name ([expression [, expression ... ]]) [ FILTER ( WHERE filter_clause ) ] OVER window_name
function_name ([expression [, expression ... ]]) [ FILTER ( WHERE filter_clause ) ] OVER ( window_definition )
function_name ( * ) [ FILTER ( WHERE filter_clause ) ] OVER window_name
function_name ( * ) [ FILTER ( WHERE filter_clause ) ] OVER ( window_definition )

・window_definition
	[ existing_window_name ]
	[ PARTITION BY expression [, ...] ]
	[ ORDER BY expression [ ASC | DESC | USING operator ] [ NULLS { FIRST | LAST } ] [, ...] ]
	[ frame_clause ]
	[ existing_window_name ]

・frame_clause
{ RANGE | ROWS | GROUPS } frame_start [ frame_exclusion ]
{ RANGE | ROWS | GROUPS } BETWEEN frame_start AND frame_end [ frame_exclusion ]

・frame_start、frame_end
   UNBOUNDED PRECEDING
   offset PRECEDING
   CURRENT ROW
   offset FOLLOWING
   UNBOUNDED FOLLOWING

・frame_exclusion	/* 説明省略。詳細は本家ドキュメント参照 */
   EXCLUDE CURRENT ROW
   EXCLUDE GROUP
   EXCLUDE TIES
   EXCLUDE NO OTHERS

</pre>
<br>

<table>
<tr bgcolor="#cccccc">
<th>パラメータ</th>		<th>説明</th>

</tr><tr>
<td>window_name</td>	<td>WINDOWの名前</td>
</tr><tr>
<td>existing_window_name</td>	<td>既存のWINDOWの名前</td>
</tr><tr>
<td>function_name</td>	<td>WINDOW関数や集約関数など</td>

</tr><tr><td></td><td></td>
</tr><tr><td></td><td></td>


</tr><tr bgcolor="#cccccc">
<th>句</th>		<th>説明</th>

</tr><tr>
<td>PARTITION BY expression</td>	<td>expressionでグループ化。集約関数も使える</td>
</tr><tr>
<td>ORDER BY expression	</td>	<td>expressionで並べ替え。オプションとして[ASC | DESC | USING operator]が設定できる</td>
</tr><tr>
<td>EXCLUDE {CURRENT ROW|GROUP|TIES|NO OTHERS}	</td>	<td>説明省略。詳細は本家ドキュメント参照</td>

</tr><tr><td></td><td></td>
</tr><tr><td></td><td></td>


</tr><tr bgcolor="#cccccc">
<th>オプション</th>		<th>説明</th>

</tr><tr>
<td>NULLS FIRST	</td>	<td>NULLを先頭に置く</td>
</tr><tr>
<td>NULLS LAST	</td>	<td>NULLを末尾に置く</td>

</tr><tr><td></td><td></td>
</tr><tr><td></td><td></td>


</tr><tr bgcolor="#cccccc">
<th>フレーム(frame)</th>		<th>説明</th>

</tr><tr>
<td>UNBOUNDED PRECEDING</td>	<td>フレームの開始位置はパーティションの先頭。frame_startのデフォルト。frame_endでは設定できない</td>
</tr><tr>
<td>value PRECEDING</td>	<td>フレームの開始位置は自身の位置からvalueレコード前</td>
</tr><tr>
<td>CURRENT ROW	</td>	<td>自身の位置。frame_endのデフォルト</td>
</tr><tr>
<td>value FOLLOWING	</td>	<td>フレームの末尾は自身の位置からvalueレコード後</td>
</tr><tr>
<td>UNBOUNDED FOLLOWING</td>	<td>フレームの末尾はパーティションの末尾。frame_startでは設定できない</td>
</tr></table>

<br>

%CHAPTER 解説

<p>
バージョン8.4からWINDOW句とOVER句がサポートされました。
</p>

<p>
・パーティション、フレーム
<br>
パーティションはPARTITION BY句に指定したカラムの値でグループ化したものです。
</p>

<p>
実例を示します。
<br>
カラムpartの値でテーブルwindow_testをグループ化します。partの値(1,2,3)によって3つのパーティションにグループ化されています。
</p>

<font color="#ff0000">
作図用データ。
</font>

<pre>
sampledb=# SELECT part, data, row_number() OVER (PARTITION BY part ORDER BY data)
sampledb-#                             FROM window_test;
 part | data | row_number
------+------+------------
    1 |    1 |          1
    1 |    2 |          2
    1 |    3 |          3
    1 |    4 |          4
    2 |   10 |          1
    2 |   20 |          2
    2 |   30 |          3
    3 |  100 |          1
    3 |  200 |          2
(9 rows)
</pre>

<br>
<br>

<table border=1><tr><td>
<img src="./fig-6-windowfunc-01.png" width=700><br>
</td></tr></table><br>


<p>
フレームとは、(レコード毎の)WINDOW関数や集約関数の有効範囲のことです。
<br>
デフォルトの設定である"RANGE BETWEEN unbounded preceding AND current row"の結果を示します。
</p>

<font color="#ff0000">
作図用データ。表示は通常のSQLの出力形式で、矢印と青文字を追記してください。
</font>

<pre>
sampledb=# SELECT part, data, sum(data) OVER (PARTITION BY part ORDER BY data
sampledb(#     RANGE BETWEEN unbounded preceding AND current row) AS
sampledb-#     "unbounded preceding -> current row" FROM window_test;
 part | data | unbounded preceding -> current row
------+------+-----------------------------------
    1 |    1 |                                 1  = 1
    1 |    2 |                                 3  = 1 + 2
    1 |    3 |                                 6  = 1 + 2 + 3
    1 |    4 |                                10  = 1 + 2 + 3 + 4
    2 |   10 |                                10  = 10
    2 |   20 |                                30  = 10 + 20
    2 |   30 |                                60  = 10 + 20 + 30
    3 |  100 |                               100  = 100
    3 |  200 |                               300  = 100 + 200
(9 rows)
</pre>

<br>
<br>

<table border=1><tr><td>
<img src="./fig-6-windowfunc-02.png" width=700><br>
</td></tr></table><br>


<p>
この例のフレームは、
パーティションの先頭(UNBOUNDED PRECEDING)からそのレコード(CURRENT ROW)までです。
<br>
1レコード目、自身がパーティションの先頭なのでフレームは自分自身のみです。よって集約関数sum()の結果は自分自身の値=1です。
<br>
2レコード目、フレームはパーティションの先頭と自分自身の2レコードです。集約関数sum()の結果はパーティションの先頭の値=１と自分自身の値=2の加算した結果(1+2=3)になります。
<br>
3レコード目以降も同様です。
</p>


<p>
別の例を示します。
<br>
この例のフレームは、
"RANGE BETWEEN current row AND unbounded following"、つまり自分自身(CURRENT ROW)からパーティションの末尾(UNBOUNDED FOLLOWING)までです。
<br>
1レコード目、自身がパーティションの先頭なのでフレームはパーティション全体(先頭から末尾まで)です。よって集約関数sum()は、そのパーティションの値をすべて加算した結果(1+2+3+4=10)を返します。
<br>
2レコード目、集約関数sum()は自身からパーティション末尾までの加算した結果(2+3+4=9)を返します。
<br>
3レコード目以降も同様です。
</p>


<font color="#ff0000">
作図用データ。表示は通常のSQLの出力形式で、矢印と青文字を追記してください。
</font>

<pre>
sampledb=# SELECT part, data, sum(data) OVER (PARTITION BY part ORDER BY data
sampledb(#      RANGE BETWEEN current row AND unbounded following) AS
sampledb-#     "current row -> unbounded following" FROM window_test;
 part | data | current row -> unbounded following
------+------+------------------------------------
    1 |    1 |                                 10     = 1 + 2 + 3 + 4
    1 |    2 |                                  9     =     2 + 3 + 4
    1 |    3 |                                  7     =         3 + 4
    1 |    4 |                                  4     =             4
    2 |   10 |                                 60     = 10 + 20 + 30
    2 |   20 |                                 50     =      20 + 30
    2 |   30 |                                 30     =           30
    3 |  100 |                                300     = 100 + 200
    3 |  200 |                                200     =       200
(9 rows)
</pre>

<br>
<br>

<table border=1><tr><td>
<img src="./fig-6-windowfunc-03.png" width=700><br>
</td></tr></table><br>

%CHAPTER 実行例

<font color="#ff0000">
SQL表示、縦線をそろえて表示してください。(HTMLでは縦線が揺れているが、これは表示がおかしい)
</font>


<p>
製品売上げを保存したテーブルordersを使って、WINDOW句とOVER句を解説します。
</p>

<pre>
sampledb=# SELECT region, product, sales FROM orders;
  region  | product  | sales
----------+----------+---------
 アフリカ | 食品     |    4500
 アフリカ | 木工製品 |   30160
 アフリカ | 工業製品 |  265000
 アフリカ | 貴金属   |  527850
 アフリカ | 精密機械 |  205800
 アジア   | 食品     |   19000
 アジア   | 木工製品 |   67600
 アジア   | 工業製品 | 3300000
 アジア   | 貴金属   |  459000
 アジア   | 精密機械 | 4900000
... 略 ...
</pre>
<br>

<p>
・製品毎の、地域売上げをランキング
<br>
製品毎に、地域毎の売上げをランキングします。
<br>
並べ替えはOVER句、ランキングは関数rank()を使います。
</p>

<pre>
sampledb=# SELECT product, region, sales, rank()
sampledb-#       OVER (PARTITION BY product ORDER BY sales) FROM orders;
 product  |   region   |  sales  | rank
----------+------------+---------+------
 貴金属   | オセアニア |   76500 |    1
 貴金属   | アジア     |  459000 |    2
 貴金属   | アフリカ   |  527850 |    3
 貴金属   | 中南米     |  918000 |    4
 貴金属   | ヨーロッパ | 2830500 |    5
 貴金属   | 北米       | 4360500 |    6
 工業製品 | アフリカ   |  265000 |    1
 工業製品 | ヨーロッパ | 1650000 |    2
 工業製品 | 中南米     | 1850000 |    3
 工業製品 | アジア     | 3300000 |    4
 工業製品 | 北米       | 4150000 |    5
 工業製品 | オセアニア | 4750000 |    6
... 略 ...
</pre>
<br>

<p>
・複数のWINDOW関数を使う
<br>
ランキングの分析も同時に行います。
複数のWINDOW関数を使うのでWINDOW句を設定します。
<br>
ここでカラムdiffは、各製品の最高売上げからの差額です。
各製品の最高売上げは関数first_value()で求めます。
<br>
またカラムgapは、一つ上の順位の売上げとの差額です。
一つ上の値は関数lag()で求めます。
</p>

<pre>
sampledb=# SELECT product, region, rank() OVER w, sales,
sampledb-#                   (first_value(sales) OVER w - sales) AS diff,
sampledb-#                   ( lag(sales) OVER w - sales) AS gap
sampledb-#      FROM orders WINDOW w AS  (PARTITION BY product ORDER BY sales DESC);
 product  |   region   | rank |  sales  |  diff   |   gap
----------+------------+------+---------+---------+---------
 貴金属   | 北米       |    1 | 4360500 |       0 |
 貴金属   | ヨーロッパ |    2 | 2830500 | 1530000 | 1530000
 貴金属   | 中南米     |    3 |  918000 | 3442500 | 1912500
 貴金属   | アフリカ   |    4 |  527850 | 3832650 |  390150
 貴金属   | アジア     |    5 |  459000 | 3901500 |   68850
 貴金属   | オセアニア |    6 |   76500 | 4284000 |  382500
 工業製品 | オセアニア |    1 | 4750000 |       0 |
 工業製品 | 北米       |    2 | 4150000 |  600000 |  600000
 工業製品 | アジア     |    3 | 3300000 | 1450000 |  850000
 工業製品 | 中南米     |    4 | 1850000 | 2900000 | 1450000
 工業製品 | ヨーロッパ |    5 | 1650000 | 3100000 |  200000
 工業製品 | アフリカ   |    6 |  265000 | 4485000 | 1385000
... 略 ...
</pre>
<br>
