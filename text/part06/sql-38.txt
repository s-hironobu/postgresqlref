%FILE internal/sql-38.html
%LASTMOD
%KEY pgsql-sql38

%TITLE トリガの定義、変更、削除 <a href="https://www.postgresql.org/docs/current/sql-createtrigger.html" target="_blank" rel="noopener noreferrer">CREATE TRIGGER</a> / <a href="https://www.postgresql.org/docs/current/sql-altertrigger.html" target="_blank" rel="noopener noreferrer">ALTER TRIGGER</a> / <a href="https://www.postgresql.org/docs/current/sql-droptrigger.html" target="_blank" rel="noopener noreferrer">DROP TRIGGER</a>

<pre>
[<書式>]


● トリガの定義
CREATE [ CONSTRAINT ] TRIGGER trigger_name [ BEFORE | AFTER | INSTEAD OF ]
       [ INSERT | DELETE | UPDATE | TRUNCATE [ OR ... ] ]
       ON table_name
      [ FROM referenced_table_name ]
      { NOT DEFERRABLE | [ DEFERRABLE ]
                               { INITIALLY IMMEDIATE | INITIALLY DEFERRED } }
      [ FOR [ EACH ] { ROW | STATEMENT } ]
　    [ WHEN ( condition ) ]
       EXECUTE PROCEDURE procedure (args)

● トリガ名の変更
ALTER TRIGGER trigger_name ON table_name
      RENAME TO new_trigger_name

●extensionとの依存性（drop extensionでトリガも削除する)
ALTER TRIGGER name ON table_name [ NO ] DEPENDS ON EXTENSION extension_name


● トリガの削除
DROP TRIGGER [ IF EXISTS ] trigger_name ON table_name [ CASCADE | RESTRICT ]

</pre>
<br>

<table>
<caption>パラメータ</caption>
<tr bgcolor="#cccccc">
<th>パラメータ</th>	<th>説明</th>
</tr><tr>
<td>trigger_name</td>	<td>定義/変更/削除するトリガ名</td>
</tr><tr>
<td>table_name	</td>	<td>テーブル操作の対象テーブル名</td>
</tr><tr>
<td>new_trigger_name	</td>	<td>変更後の新しいトリガ名</td>
</tr><tr>
<td>procedure	</td>	<td>呼び出される関数名</td>
</tr><tr>
<td>args	</td>	<td>関数の引数</td>
</tr></table>

<br>

<table>
<caption>句</caption>
<tr bgcolor="#cccccc">
<th>句</th>	<th>説明</th>
</tr><tr>
<td>WHEN ( condition )</td>	<td>条件式conditionがtrueの場合だけトリガ関数を実行する。条件式にはOLD.col、NEW.colどちらも使える。</td>
</tr><tr>
<td>FROM referenced_table_name</td>	<td>外部キー制約で参照される他のテーブルの名前を設定。制約トリガ(CONSTRAINT設定)でのみ使用可能。(公式ドキュメントでは"利用推奨しない")</td>
</tr></table>

<br>

<table>
<caption>オプション</caption>
<tr bgcolor="#cccccc">
<th>オプション</th>	<th>説明</th>
</tr><tr>
<td>CONSTRAINT	</td>	<td>制約の検査タイミングが調整できる(関数を呼ぶタイミングはAFTERのみ設定可能)</td>
</tr><tr>
<td>CASCADE	</td>	<td>トリガに依存するオブジェクトも一緒に削除</td>
</tr><tr>
<td>RESTRICT	</td>	<td>依存するオブジェクトのないトリガのみ削除</td>
</tr></table>

<br>

<table>
<caption>実行タイミングオプション</caption>
<tr bgcolor="#cccccc">
<th>実行タイミングオプション</th>	<th>説明</th>
</tr><tr>
<td>BEFORE, AFTER,  INSTEAD OF	</td>	<td>関数を呼ぶタイミング。</td>
</tr><tr>
<td>INSERT, DELETE, UPDATE, TRUNCATE</td>	<td>トリガを起動するテーブル操作。'OR'で複数指定可能。</td>
</tr><tr>
<td>FOR [EACH] ROW, FOR [EACH] STATEMENT</td>	<td>関数の実行タイミング。'ROW'ならばレコードが影響を受ける毎、'STATEMENT'ならばトリガの実行毎</td>
</tr></table>

<br>

<table>
<caption>検査タイミングオプション</caption>
<tr bgcolor="#cccccc">
<th>検査タイミングオプション</th>	<th>説明</th>
</tr><tr>
<td>NOT DEFERRABLE	</td>	<td>遅延検査できない。デフォルト</td>
</tr><tr>
<td>DEFERRABLE INITIALLY IMMEDIATE	</td>	<td>CONSTRAINTオプションと併用。遅延検査可能だが、初期状態では即時検査</td>
</tr><tr>
<td>DEFERRABLE INITIALLY DEFERRED	</td>	<td>CONSTRAINTオプションと併用。遅延検査する</td>
</tr></table>


<br>



%CHAPTER 解説

<p>
トリガは更新系SQL文(INSERT、UPDATE、DELETE、TRUNCATE)の前後に、指定した関数を実行する機能です。
指定できる関数はPL/pgSQL言語で定義したユーザ定義関数です。
</p>

<p>
・トリガの登録手順
<br>
トリガの登録手順は以下のとおりです。
</p>

<ol>
<li>トリガ関数の定義</li>
<li>トリガの登録</li>
</ol>

<p>
・トリガ関数と通常の関数との相違点
<br>
「トリガ関数」とはトリガによって実行される関数で、通常の関数との違いは以下の3点です。
</p>

<ol>
<li>返り値型はtrigger型</li>
<li>特殊変数を利用できる([<表6-09>]参照)</li>
<li>関数は'RETURN NULL'で終了する</li>
</ol>

<p>
・トリガ関数の実行タイミング
<br>
トリガ関数を実行するタイミングは、次の3つのパラメータを使って制御します。
</p>

<ul>
<li>トリガの呼び出しタイミング: BEFORE, AFTER, INSTEAD OF</li>
<p>
トリガに設定したテーブルが操作される前に呼び出すのか、操作された後に呼び出すのかを制御する。
<br>
バージョン9.1からサポートされたINSTEAD OFはビューに対してのみ設定できる。呼び出しレベルはFOR EACH ROWのみである。
<br>
CONSTRAINTを設定した場合(制約トリガ)は、AFTERのみ設定可能。
</p>

<li>トリガを呼び出すSQL文: INSERT, DELETE, UPDATE, TRUNCATE</li>
<p>
トリガを呼び出すのはINSERT実行時か、DELETE実行時か、UPDATE実行時かを制御する。TRUNCATEはバージョン8.4から。
</p>

<li>トリガの呼び出しレベル:  FOR EACH ROW, FOR EACH STATEMENT</li>
<p>
テーブルやビューの操作で、レコードが変更を受ける毎にトリガ関数を実行するのか、トリガの呼び出し毎にトリガ関数を実行するのかを制御する。
<br>
'FOR EACH ROW'はテーブル操作でレコードが影響を受ける毎にトリガ関数を実行する。
たとえば10レコードを更新(UPDATE)すると、更新の度に独立に計10回、トリガ関数を実行する。
<br>
'FOR EACH STATEMENT'は操作されるレコード数に関係なく、指定されたトリガ関数を一度だけ実行する。
</p>

<p>
FOR EACH ROWは、呼び出しタイミングがAFTERかBEFOREの場合テーブルのみ、INSTEAD OFの場合ビューのみ設定できる。
</p>

</ul>


<p>
これらの関係をまとめます([<表6-08>]参照)。
</p>

<table border=1>
<caption>[<表6-08>] 実行タイミング</caption>
<tr bgcolor="#cccccc">
<th>実行タイミング</th>	<th>実行可能なSQL文</th>	<th>FOR EACH ROW</th>	<th>FOR EACH STATEMENT</th>
</tr><tr>
<td rowspan=2 valign=top>BEFORE</td>	<td>INSERT/UPDATE/DELETE</td>	<td>テーブル</td>	<td>テーブルおよびビュー</td>
</tr><tr>
	<td>TRUNCATE	</td>	<td>—	</td>	<td>テーブル</td>

</tr><tr>
<td rowspan=2 valign=top>AFTER</td>	<td>INSERT/UPDATE/DELETE</td>	<td>テーブル</td>	<td>テーブルおよびビュー</td>
</tr><tr>
	<td>TRUNCATE	</td>	<td>	—	</td>	<td>		テーブル</td>

</tr><tr>
<td rowspan=2 valign=top>INSTEAD OF</td>	<td>INSERT/UPDATE/DELETE</td>	<td>ビュー</td>		<td>—</td>
</tr><tr>
	<td>TRUNCATE		</td>	<td>		—		</td>	<td>	—</td>
</tr></table>

<br>


<p>
・トリガのための特殊変数
<br>
トリガ関数の中で使える特殊変数の一覧を、[<表6-09>]に示します。
</p>

<table border=1>
<caption>[<表6-09>] 特殊変数一覧</caption>
<tr bgcolor="#cccccc">
<th>変数名</th>	 <th>データ型</th>		<th>説明</th>
</tr><tr>
<td>NEW	</td><td>RECORD	</td><td>INSERT / UPDATE 操作によって更新されたレコードの値</td>
</tr><tr>
<td>OLD	</td><td>RECORD	</td><td>UPDATE / DELETE 操作によって更新される前のレコードの値</td>
</tr><tr>
<td>TG_NAME	</td><td>name	</td><td>トリガ名</td>
</tr><tr>
<td>TG_WHEN	</td><td>text	</td><td>トリガの起動タイミングをあらわす文字列['BEFORE' または'AFTER'] </td>
</tr><tr>
<td>TG_LEVEL</td><td>text	</td><td>トリガの起動レベルをあらわす文字列['ROW' または'STATEMENT'] </td>
</tr><tr>
<td>TG_OP	</td><td>text	</td><td>トリガを起動したSQL文名['INSERT', 'UPDATE'または'DELETE'] </td>
</tr><tr>
<td>TG_RELID</td><td>oid	</td><td>このトリガの呼び出し元になるテーブルのオブジェクトID </td>
</tr><tr>
<td>TG_RELNAME</td><td>name	</td><td>このトリガの呼び出し元になるテーブル名。廃止予定</td>
</tr><tr>
<td>TG_TABLE_NAME</td><td>name	</td><td>このトリガの呼び出し元になるテーブル名。 </td>
</tr><tr>
<td>TG_TABLE_SCHEMA</td><td>name	</td><td>このトリガの呼び出し元になるテーブルのスキーマ名。</td>
</tr><tr>
<td>TG_NARGS</td><td>integer	</td><td>トリガの呼び出す関数に与えられる引数の数</td>
</tr><tr>
<td>TG_ARGV[]</td><td>text[]	</td><td>CREATE TRIGGER文の引数</td>
</tr></table>

<br>

<p>
これらの変数を使って、例えば更新前後の値を記録するなど、より柔軟な処理が可能になります。
</p>

<p>
・WHEN句
<br>
バージョン9.0からWHEN句でトリガ関数を実行するか否かの条件式を記述できます。
'FOR EACH ROW'ならば特殊変数OLDやNEWが使えます。
<br>
バージョン9.2の時点ではWHEN句にサブクエリは設定できません。
</p>

<p>
・CONSTRAINTオプション
<br>
CONSTRAINTオプションを設定すると制約トリガとなり、SET CONSTRAINTS文で検査タイミングを変更できます[<脚注1>]。
ただし、この<u>オプションを設定できるのは実行タイミングAFTER, かつFOR EACH ROWの場合だけ</u>です。
<br>
検査タイミングそのもの、およびデフォルト設定オプション(DEFERRABLE INITIALLY IMMEDIATE、DEFERRABLE INITIALLY DEFERRED)
については<a href="./sql-04.html">[<6-04>]</a>の冒頭で解説したので参照してください。
</p>


<blockquote><table BORDER="1"><tr><td>脚注1</td><td>
<p>
制約トリガは、制約違反した時に例外を発生させなければなりません。
</>
</td></tr></table></blockquote>




%CHAPTER 実行例

<p>
・トリガの定義と利用
<br>
テーブルitemlistにレコードをINSERT、またはDELETEするたびにトリガupdate_number_of_itemsが起動され、
関数count_number_of_items()を実行します。
関数count_number_of_items()はテーブルitemlistのレコード数を数えて、
その数をテーブルnumber_of_itemsに保存します。
</p>

<pre>
sampledb=# CREATE TABLE number_of_items (count bigint);
CREATE TABLE
sampledb=# INSERT INTO number_of_items (count) SELECT count(*) FROM itemlist;
INSERT 0 1

sampledb=# CREATE FUNCTION count_number_of_items () RETURNS trigger AS
sampledb-#  $$
sampledb$#    DECLARE
sampledb$#    BEGIN
sampledb$#      UPDATE number_of_items SET count = (SELECT count (*)
sampledb$#                                                 FROM itemlist);
sampledb$#      RETURN NULL;
sampledb$#    END;
sampledb$#  $$
sampledb-# LANGUAGE plpgsql;
CREATE FUNCTION

sampledb=# CREATE TRIGGER update_number_of_items AFTER INSERT OR DELETE
sampledb-#    ON itemlist FOR EACH ROW
sampledb-#                   EXECUTE PROCEDURE count_number_of_items ();
CREATE TRIGGER
</pre>
<br>

<p>
実行例を示します。
<br>
テーブルnumber_of_itemsの値を確認した後、テーブルitemlistにデータをINSERTします。
</p>


<pre>
sampledb=# SELECT * FROM number_of_items;
 count
-------
     3
(1 row)

sampledb=# INSERT INTO itemlist VALUES (4, 'book',2890, 85);
INSERT 0 1

sampledb=# -- トリガupdate_number_of_itemsの働きで、
sampledb-# -- テーブルnumber_of_itemsの値が更新された
sampledb=# SELECT * FROM number_of_items;
 count
-------
     4
(1 row)
</pre>
<br>

<p>
・特殊変数を使ったトリガの作成
<br>
テーブルitemlistの変更履歴を、テーブルitemlist_logに保存します。
<br>
テーブルitemlistを更新するとトリガitemlist_loggingが起動され、関数insert_itemlist_log()を呼び出します。
関数insert_itemlist_log()は更新前と後の価格データを、テーブルitemlist_logに保存します。
</p>

<pre>
sampledb=# CREATE TABLE itemlist_log
sampledb-#                      (name text, old_price int, new_price int);
CREATE TABLE

sampledb=# CREATE FUNCTION insert_itemlist_log() RETURNS trigger AS
sampledb-#   $$
sampledb$#    DECLARE
sampledb$#    BEGIN
sampledb$#      INSERT INTO itemlist_log
sampledb$#                    VALUES (NEW.name, OLD.price, NEW.price);
sampledb$#      RETURN NULL;
sampledb$#    END;
sampledb$#  $$
sampledb-# LANGUAGE plpgsql;
CREATE FUNCTION

sampledb=# CREATE TRIGGER itemlist_logging AFTER UPDATE
sampledb-#   ON itemlist FOR EACH ROW  EXECUTE PROCEDURE insert_itemlist_log();
CREATE TRIGGER
</pre>
<br>

<p>
テーブルitemlistのデータをいくつか更新すると、テーブルitemlist_logに記録された変更履歴は以下のようになります。
</p>

<pre>
sampledb=# SELECT * FROM itemlist_log;
   name   | old_price | new_price
----------+-----------+-----------
 pen      |       100 |       100
 notebook |       120 |       120
 eraser   |        72 |        60
 notebook |       120 |       144
(4 rows)
</pre>
<br>

<p>
・トリガの呼び出しレベル
<br>
トリガの呼び出しレベル(FOR EACH ROW, FOR EACH STATEMENT)による挙動の違いを明確にするため、テーブルitemlistに対するUPDATE文を実行した際に、変更されたレコード数を記録する関数count_update_row()とトリガcount_update_row_trigger、およびUPDATE文の実行回数を記録する関数count_update_statement()とトリガcount_update_statement_triggerを定義します。
</p>

<pre>
sampledb=# CREATE TABLE count_update (row int, statement int);
CREATE TABLE

sampledb=# INSERT INTO count_update VALUES (0, 0);
INSERT 0 1

sampledb=# CREATE FUNCTION count_update_row() RETURNS trigger AS
sampledb-#   $$
sampledb$#    DECLARE
sampledb$#    BEGIN
sampledb$#         UPDATE count_update SET row = row + 1;
sampledb$#         RETURN NULL;
sampledb$#    END;
sampledb$#   $$
sampledb-# LANGUAGE plpgsql;
CREATE FUNCTION

sampledb=# CREATE FUNCTION count_update_statement() RETURNS trigger AS
sampledb-#   $$
sampledb$#    DECLARE
sampledb$#    BEGIN
sampledb$#         UPDATE count_update SET statement = statement + 1;
sampledb$#         RETURN NULL;
sampledb$#    END;
sampledb$#   $$
sampledb-# LANGUAGE plpgsql;
CREATE FUNCTION

sampledb=# CREATE TRIGGER count_update_row_trigger AFTER UPDATE
sampledb-#   ON itemlist FOR EACH ROW  EXECUTE PROCEDURE count_update_row();
CREATE TRIGGER
sampledb=# CREATE TRIGGER count_update_statement_trigger AFTER UPDATE
sampledb-#   ON itemlist FOR EACH STATEMENT
sampledb-#                  EXECUTE PROCEDURE count_update_statement();
CREATE TRIGGER
</pre>
<br>

<p>
テーブルitemlistに対し、1レコードの更新と全レコードの更新、計2回のUPDATE文を実行します。
</p>

<pre>
sampledb=# UPDATE itemlist SET price = 120 WHERE id = 1;
UPDATE 1
sampledb=# UPDATE itemlist SET price = floor(price * 1.1);
UPDATE 3
</pre>
<br>

<p>
テーブルcount_updateの値が適切に更新されたことが分かります(全更新レコード数は4レコード、UPDATE文実行回数は2回)。
</p>

<pre>
sampledb=# SELECT * FROM count_update;
 row | statement
-----+-----------
   4 |         2
(1 row)
</pre>
<br>

<p>
・WHEN句
<br>
テーブルitemlistの変更履歴について、価格が安くなった場合だけテーブルitemlist_discount_logに保存します。
トリガitemlist_dicount_loggingは価格が安くなった場合だけ、トリガ関数を実行します。
</p>

<pre>
sampledb=# CREATE TABLE itemlist_discount_log
sampledb-#                (name text, old_price int, new_price int);
CREATE TABLE

sampledb=# CREATE OR REPLACE FUNCTION insert_itemlist_discount_log()
sampledb-#                                              RETURNS trigger AS
sampledb-# $$
sampledb$#     DECLARE
sampledb$#     BEGIN
sampledb$#       INSERT INTO itemlist_discount_log
sampledb$#                          VALUES (NEW.name, OLD.price, NEW.price);
sampledb$#       RETURN NULL;
sampledb$#     END;
sampledb$#   $$
sampledb-#  LANGUAGE plpgsql;
CREATE FUNCTION

sampledb=# CREATE TRIGGER itemlist_discount_logging AFTER UPDATE
sampledb-#      ON itemlist FOR EACH ROW
sampledb-#       /* 価格が安くなった場合だけ、トリガ関数を実行する */
sampledb-#        WHEN (NEW.price < OLD.price)
sampledb-#        EXECUTE PROCEDURE insert_itemlist_discount_log();
CREATE TRIGGER

sampledb=# UPDATE itemlist SET price = 90 WHERE id = 1;
UPDATE 1
sampledb=# UPDATE itemlist SET price = 150 WHERE id = 2;
UPDATE 1
sampledb=# SELECT * FROM itemlist_discount_log;
 name | old_price | new_price
------+-----------+-----------
 pen  |       100 |        90
(1 row)
</pre>
<br>
