%FILE internal/sql-28.html
%LASTMOD
%KEY pgsql-sql28

%TITLE 選択したレコードに対するロック <a href="https://www.postgresql.org/docs/current/sql-select.html#SQL-FOR-UPDATE-SHARE" target="_blank" rel="noopener noreferrer">FOR [NO KEY] UPDATE /  FOR [KEY] SHARE</a>

<pre>
[<書式>]
SELECT select_list
       FROM from_list
       [ FOR { UPDATE | NO KEY UPDATE | SHARE | KEY SHARE }
       [ OF table_name [, ...] ] [ NOWAIT | SKIP LOCKED ] [...] ]

</pre>
<br>

<table>
<caption>パラメータ</caption>
<tr bgcolor="#cccccc">
<th>パラメータ</th>	<th>説明</th>
</tr><tr>
<td>FOR UPDATE</td>	<td>選択したレコードに排他的ロックをかける</td>
</tr><tr>
<td>FOR NO KEY UPDATE</td>	<td>FOR UPDATEとほぼ同じ、FOR KEY SHAREと競合しない。</td>
</tr><tr>
<td>FOR SHARE</td>	<td>選択したレコードに共有ロックをかける。</td>
</tr><tr>
<td>FOR KEY SHARE</td>	<td>FOR SHAREとほぼ同じ、主キー以外のカラムを更新するUPDATE文とFOR NO KEY UPDATEと競合しない</td>
</tr></table>

<br>


<table>
<caption>オプション</caption>
<tr bgcolor="#cccccc">
<th>オプション</th>	<th>説明</th>
</tr><tr>
<td>NOWAIT</td>	<td>ロックが競合した場合、ブロックせずにすぐにエラーを返す</td>
</tr><tr>
<td>SKIP LOCKED</td>	<td>即座にLOCKできないものはスキップする。一貫性を損なうので通常は使用しない。</td>
</tr></table>

<br>


%CHAPTER 解説

<p>
選択したレコードに対するロックについて解説します。
細かな注意点が多数あるので、使用にあたっては公式ドキュメントを参照してください。
</p>

<p>
<b>
SELECT FOR UPDATEで、count(*)を使いたくなる場合がありますが、集計関数とFOR UPDATEなどは併用できません。注意。
</b>
</p>


<p>
・FOR UPDATE
<br>
SELECT文で選択したレコードに対して"排他的ロック"をかけます。
<br>
FOR UPDATEで排他的ロックをかけたレコードに対し、他のトランザクションがUPDATEやDELETE、またはここで示した4つのロック(FOR UPDATEを含む)を実行しようとすると、ブロックされます。
<br>
簡単に言えば、４つのロックの中で最も強くレコードがロックされます。
</p>

<p>
・FOR NO KEY UPDATE
<br>
バージョン9.3からサポートされたFOT NO KEY UPDATEはFOR UPDATEとほぼ同じですが、(最も弱いロックである)FOR KEY SHAREとは競合しません。
</p>

<p>
・FOR SHARE
<br>
バージョン8.1からサポートされたFOR SHARE句は、SELECT文で選択されたレコードに対して"共有ロック"をかけます。
<br>
FOR SHAREで共有ロックをかけたレコードに対し、
他のトランザクションがUPDATEやDELETEを実行したり、
SELECT FOR UPDATEやSELECT FOR NO KEY UPDATEで排他ロックをかけようとするとブロックされます。
しかし、SELECT FOR SHAREやSELECT FORKEY SHAREの共有ロックとは競合せず、これらはブロックされません。
</p>

<p>
・FOR KEY SHARE
<br>
バージョン9.3からサポートされたFOR KEY SHAREは、主キーを更新するUPDATE文とFOR UPDATEによる排他ロックとだけ競合します。
主キー以外のカラムを更新するUPDATE文、DELETE文、およびFOR NO KEY UPDATEやFOR SHAREやFOR KEY SHAREとは競合せず、これらはブロックされません。
</p>

<p>
・NOWAITオプション
<br>
バージョン8.1からNOWAITオプションがサポートされました。
NOWAITオプションを設定するとロックが競合している場合、ブロックされずに即エラーを返します。
</p>


<p>
・ロックの競合関係
<br>
上に示した4つのロックと基本的なSQL文(SELECT, UPDATE, DELETE, INSERT)の間のロックの競合関係を[<表6-07>]にまとめました。
特にUPDATE文は主キーの値を更新するもの(UPDATE with PKEY)と、主キー以外のカラムの値を更新するもの(UPDATE without PKEY)に分けて表示します。
</p>


<table border=1>
<caption>[<表6-07>] ロックの競合関係</caption>
<tr bgcolor="#cccccc">
<th>＼トランザクションB<br>---------------<br>トランザクションA＼</th> <th>SELECT<br>INSERT</th>	<th>UPDATE with PKEY</th> <th>UPDATE without PKEY<br>DELETE</th> <th>FOR UPDATE</th> <th>FOR NO KEY UPDATE</th>	<th>FOR SHARE</th> <th>FOR KEY SHARE</th>
</tr><tr>
<td>UPDATE with PKEY        </td> <td>   ◎   </td> <td>   ×    </td> <td>    ×      </td> <td>    ×     </td> <td>    ×     </td> <td>   × *3 </td> <td>    × </td>
</tr><tr>
<td>UPDATE without PKEY     </td> <td>   ◎   </td> <td>   ×    </td> <td>    ×      </td> <td>    ×     </td> <td>    ×     </td> <td>   × *3 </td> <td>    ◎ </td>
</tr><tr>
<td>FOR UPDATE              </td> <td>   ◎   </td> <td>   × *1 </td> <td>    × *1   </td> <td>    ×     </td> <td>    ×     </td> <td>   ×    </td> <td>    × </td>
</tr><tr>
<td>FOR NO KEY UPDATE       </td> <td>   ◎   </td> <td>   ×    </td> <td>    ×      </td> <td>    ×     </td> <td>    ×     </td> <td>   ×    </td> <td>    ◎ </td>
</tr><tr>
<td>FOR SHARE               </td> <td>   ◎   </td> <td>   × *2 </td> <td>    × *2   </td> <td>    ×     </td> <td>    ×    </td> <td>    ◎ *2 </td> <td>    ◎ </td>
</tr><tr>
<td>FOR KEY UPDATE          </td> <td>   ◎   </td> <td>   ×   </td> <td>    ◎      </td> <td>    ×     </td> <td>    ◎     </td> <td>   ◎    </td> <td>    ◎ </td>
</tr>
</table>

◎ : ブロックされない。ただしロック取得後の挙動はSQLと状況に依存する。<br>
× :ブロックされる。NOWAITオプションをつけた場合はエラーを返す。
<br><br>
 *1 :説明(1)と[<図6-02>]参照　　　 *2 :説明(2)と[<図6-03>]参照　　　 *3 :説明(3)と[<図6-04>]参照
<br>
<br>


<p>
[<表6-07>]の"トランザクションA"や"トランザクションB"は、
[<図6-02>]〜[<図6-04>]を想定しています。
<br>
ここでブロックされた場合の挙動は、バージョン9.3でサポートされた設定パラメータlock_timeoutにも依存します。ブロックされた時間がlock_timeoutを超えると、実行したSQL文はエラーを返してブロック状態から脱します。
<br>
以下、具体例を使ってロックの競合関係と、表の見方を同時に説明します。
</p>


%SECTION (1)SELECT FOR UPDATE

<p>
トランザクションAがSELECT FOR UPDATE文で検索したレコードを、
トランザクションBが削除します([<図6-02>]参照)。
しかし、トランザクションAがUPDATE文を実行しコミットするまで、
トランザクションBの削除はブロックされます。
</p>


<table border=1>
<caption>[図6-02>] SELECT FOR UPDATEの実行例</caption>
<tr><td>
<left>
<img src="./fig-6-02.png" width=800><br>
</left>
</td></tr></table>


<p>
これは[<表6-07>]中で"× *1"と示した部分に対応します。
</p>

<p>
図中、トランザクションBはブロックされたままですが、もしもlock_timeoutに正値を設定している場合は、ブロック時間がその値を超えるとエラーを返してトランザクションはABORTされます。
</p>

%SECTION (2)SELECT FOR SHARE


<p>
トランザクションAがSELECT FOR SHARE文で検索したレコードに対して、トランザクションBもSELECT FOR SHARE文を実行します([<図6-03>]参照)。
</p>


<table border=1>
<caption>[<図6-03>] SELECT FOR SHAREの実行例(競合しない場合)</caption>
<tr><td>
<left>
<img src="./fig-6-03.png" width=800><br>
</left>
</td></tr></table>

<br>

<p>
SELECT FOR SHARE文どうしは競合しないので、ブロックされることなく実行できます。
これは[<表6-07>]中で"◎ *2"と示した部分に対応します。
</p>


<p>
しかし、次に何らかの操作(図中ではトランザクションAでUPDATE文)を実行しようとしても、
その操作はブロックされます。
これは[<表6-07>]中で"× *2"と示した部分に対応します。
</p>

<p>
さらに、他のトランザクションが何らかの操作を行なおうとするとデッドロックが発生し、
そのトランザクションは自動的にアボートされます。
</p>



%SECTION (3) UPDATEが先行するケース

<p>
最後に、UPDATE文が(他のトランザクションの)ロック取得に先行するケースを示します。
</p>

<p>
トランザクションAがSELECT FOR SHARE文に続けてUPDATE文を実行し、
その後でトランザクションBがSELECT FOR SHARE文を実行します([<図6-04>]参照)。
</p>



<table border=1>
<caption>[<図6-04>] UPDATE文がSELECT FOR SHAREに先行する例(競合する場合)</caption>
<tr><td>
<left>
<img src="./fig-6-04.png" width=800><br>
</left>
</td></tr></table>
<br>


<p>
すでに対象となるレコードがUPDATEされてしまったので、
トランザクションBのSELECT FOR SHARE文はブロックされます。
これは[<表6-07>]中で"× *3"と示した部分に対応します。
<br>
なお[<表6-07>]からわかるように、トランザクションBがSELECT FOR UPDATE文やSELECT FOR NO KEY UPDATE文あってもブロックされます。
先行して実行されたUPDATE文が主キーの値を更新した場合は、SELECT FOR KEY SHAREもブロックされます。
</p>


<p>
このように取得するロックの種類に関らず、ロック取得後に実行するSQLによってブロックされたり、デッドロックが発生したりします。
</p>


