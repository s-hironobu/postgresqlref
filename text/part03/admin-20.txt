%FILE internal/admin-20.html
%LASTMOD
%KEY pgsql-admin20


%TITLE pg_basebackupによるフルバックアップとインクリメンタルバックアップ

<p>
<a href="https://www.postgresql.org/docs/current/app-pgbasebackup.html" target="_blank" rel="noopener noreferrer">pg_basebackup</a>コマンドを使ったバックアップ方法を説明します。
</p>

<p>
はじめにpg_bsebackupコマンドについて説明します。
次にフルバックアップとリストアの手順を説明します。
最後にバージョン17からサポートされたインクリメンタルバックアップについて説明します。
</p>


%CHAPTER <a href="https://www.postgresql.org/docs/current/app-pgbasebackup.html" target="_blank" rel="noopener noreferrer">pg_basebackup</a>

<p>
pg_basebackupコマンドはStreamingReplicationに依存したツールです。
<br>
pg_basebackupはPostgreSQLサーバのwalsenderプロセスに接続して<a href="./admin-19.html">[<3-19>]</a>で示した手順を自動で行い、
すべてのテーブルスペース以下のファイルと、
指定されていれば最新のWALログファイルを転送します。
</p>

<p>
<a href="https://www.postgresql.org/docs/current/app-pgbasebackup.html" target="_blank" rel="noopener noreferrer">pg_basebackup</a>コマンドの構文とオプションを以下に示します。
</p>


<pre>
[<書式>]
	pg_basebackup [OPTION]...
</pre>

<br>

<table border=1>
<tr bgcolor="#cccccc">
<th>オプション</th>	<th>説明</th>
</tr><tr bgcolor="#eeeeee">
<th colspan=2 align=left>Options controlling the output:</th>
</tr><tr>
<td>-D, --pgdata=DIRECTORY </td>	<td>リストア側で作成するデータベースクラスタのディレクトリを指定</td>

</tr><tr>
<td>-F, --format=plain|tar  </td>	<td>バックアップしたデータのフォーマット。plainはデータベースクラスタそのもの。tarはtarコマンドでアーカイブ化したもの。デフォルトはplain</td>

</tr><tr>
<td>-R, --write-recovery-conf</td>	<td>データベースクラスタにstandby.signalファイルを生成する。(バージョン11以下では最低限の記述のみされているrecovery.confファイルを生成する。)</td>

</tr><tr>
<td>-i old_manifest_file, --incremental=old_manifest_file</td>	<td>インクリメンタルバックアップで、前のマニュフェストファイルold_manifest_fileを設定する。バージョン17から</td>

</tr><tr>
<td>-t, --target=TARGET[:TARGET]</td>	<td></td>


</tr><tr>
<td>-T, --tablespace-mapping=OLDDIR=NEWDIR</td>	<td></td>


</tr><tr>
<td>--waldir=WALDIR  </td>	<td>バックアップ元のpg_wal以下のWALログをバックアップする。このオプションを設定しないとWALログをバックアップしない。</td>


</tr><tr>
<td>--wal-method=none|fetch|stream    </td>	<td>バックアップ元側pg_wal以下のWALログをバックアップする。</td>

</tr><tr>
<td>--gzip   </td>	<td>--format=tarと併用。tarアーカイブをgzipで圧縮する</td>

</tr><tr>
<td>--compress=0-9  </td>	<td> gzipの圧縮レベル</td>


</tr><tr bgcolor="#eeeeee">
<th colspan=2 align=left>General options:</th>

</tr><tr>
<td>-c, --checkpoint=fast|spread </td>	<td>fastの場合、basebackup実行直前にCHECKPOINTを実行する</td>

</tr><tr>
<td>-C, --create-slot </td>	<td></td>

</tr><tr>
<td>-l, --label=LABEL	  </td>	<td> ベースバックアップ実行時のラベル</td>

</tr><tr>
<td>-n, --no-clean </td>	<td></td>

</tr><tr>
<td>-N, --no-sync </td>	<td></td>

</tr><tr>
<td>-P, --progress　</td>	<td> pg_basebackupコマンド実行中の進捗を表示する</td>

</tr><tr>
<td>-S, --slot=SLOTNAME </td>	<td></td>

</tr><tr>
<td>-v, --verbose</td>	<td> 詳細なメッセージを表示する</td>

</tr><tr>
<td>-V, --version </td>	<td></td>

</tr><tr>
<td>--manifest-checksum=SHA{224,256,384,512}|CRC32C|NONE </td>	<td></td>

</tr><tr>
<td>--manifest-force-encode </td>	<td></td>

</tr><tr>
<td>--no-estimate-size </td>	<td></td>

</tr><tr>
<td>--no-manifest </td>	<td></td>

</tr><tr>
<td>--no-slot </td>	<td>レプリケーションスロットをバックアップしない</td>

</tr><tr>
<td>--no-verify-checksums </td>	<td></td>


</tr><tr bgcolor="#eeeeee">
<th colspan=2 align=left>Connection options:</th>

</tr><tr>
<td>  -h HOSTNAME   </td>	<td> Primaryのホスト名</td>

</tr><tr>
<td>  -p PORT     </td>	<td> バックアップ元のポート番号</td>

</tr><tr>
<td>-U, --username=NAME   </td>	<td> バックアップ元への接続ユーザ名</td>

</tr><tr>
<td>-w, --no-password  </td>	<td>  パスワード入力しない</td>

</tr><tr>
<td>-W, --password  </td>	<td>  パスワード入力</td>

</tr></table>

<br>


%CHAPTER フルバックアップ

<p>
はじめにフルバックアップの方法を説明します。
</p>

%SECTION [1] postgresql.confの設定

<p>
バックアップ元のpostgresql.confの設定例を示します。
</p>

[< postgresql.confの設定例>]

<pre>
# 適宜、セキュリティポリシーに合わせて設定する。
listen_addresses = '*'

# replica か logical。
wal_level = replica

# Standbyの最大数。ここでは10。
max_wal_senders = 10

# pg_wal以下に残すWALログのサイズ。max_wal_sizeと同じでよいと思う。
wal_keep_sizes = 1G

# レプケーションスロットも設定する
max_replication_slots = 10

# archiveログも利用する場合は以下の設定も必要
archive_mode = on
archive_command = '/bin/cp %p /home/postgres/archivelogs/%f'
</pre>

<br>


%SECTION [2] pg_hba.confの設定

<p>
pg_basebackupを実行するための権限を適宜設定します。
</p>

<pre>
# TYPE  DATABASE        USER            CIDR-ADDRESS            METHOD
local   replication     all                                     trust
host    replication     all             127.0.0.1/32            trust
host    replication     postgres	192.168.1.0/24           trust
</pre>
<br>

%SECTION [3] 再起動

<p>
設定を反映させるために再起動します。
</p>

<pre>
$ pg_ctl -D /usr/local/pgsql/data start
</pre>

<br>

%SECTION [4] ベースバックアップの取得

<p>
バックアップを取得するサーバ上でpg_basebackupコマンドを実行します。
<p>

<p>
pg_basebackupコマンドの実行例を示します。
<br>
ここでは、スロットの問題を避けるため、--no-slotオプションを設定します。
</p>

<pre>
$ pg_basebackup -h primary -p 5432 -D /usr/local/pgsql/data -X stream -P -R -v --no-slot
pg_basebackup: initiating base backup, waiting for checkpoint to complete
pg_basebackup: checkpoint completed
pg_basebackup: write-ahead log start point: 0/12000028 on timeline 1
pg_basebackup: starting background WAL receiver
42476/42476 kB (100%), 1/1 tablespace
pg_basebackup: write-ahead log end point: 0/12000120
pg_basebackup: waiting for background process to finish streaming ...
pg_basebackup: syncing data to disk ...
pg_basebackup: renaming backup_manifest.tmp to backup_manifest
pg_basebackup: base backup completed
</pre>

<br>

<p>
バックアップが終了すると、指定したディレクトリ(/usr/local/pgsql/base_backup)にバックアップ元のデータベースクラスタの内容がコピーされています。
また、バックアップ開始から完了までの間に生成されたWALログもコピーされています。
</p>

<pre>
$ cd /usr/local/pgsql/base_backup
$ ls
PG_VERSION       current_logfiles  pg_dynshmem    pg_multixact  pg_snapshots  pg_tblspc    postgresql.auto.conf
backup_label     global            pg_hba.conf    pg_notify     pg_stat       pg_twophase  postgresql.conf
backup_manifest  log               pg_ident.conf  pg_replslot   pg_stat_tmp   pg_wal       standby.signal
base             pg_commit_ts      pg_logical     pg_serial     pg_subtrans   pg_xact
 ls pg_wal/
000000010000000000000012  archive_status  summaries
</pre>

<br>

<p>
ちなみに、--formatと--gzipオプションを併用するとベースバックアップ以下が圧縮された状態で出力されます。
</p>

<pre>
$ ./bin/pg_basebackup -D /usr/local/pgsql/base_backup -X stream -P -R -v --no-slot --format tar --gzip

... 略 ...

$ find base_backup/
base_backup/
base_backup/pg_wal.tar.gz
base_backup/base.tar.gz
base_backup/backup_manifest
</pre>

<br>

%SECTION [5] postgresql.conf ファイルの確認

<p>
pg_basebackupコマンドでコピーしたデータベースクラスタには、バックアップ元のpostgresql.confとpg_hba.confもコピーされますが、
適宜パラメータ値が変更されています。
また、primary_conninfoが設定されたpostgresql.auto.confも作成されます。
</p>

<p>
archiveログも使ってリカバリする場合は、restore_commandの設定も行います。
</p>

<pre>
restore_command = '/bin/cp /home/postgres/archivelogs/%f %p'
</pre>

<br>

%SECTION [6] リストア側の起動

<p>
recovery.signalファイルを作成してから、リストア側のサーバを起動します。
</p>

<pre>
$ touch base_backup/restored/recovery.signal
$ pg_ctl -D /usr/local/pgsql/base_backup start
</pre>

<br>

%CHAPTER インクリメンタルバックアップ

<p>
バージョン17からインクリメンタルバックアップがサポートされました。
</p>

<p>
バージョン16までは、pg_basebackupで取得したフルバックアップとそれ以降に生成されたarchiveログを使ってリカバリを行いましたが、
バージョン17以降は、フルバックアップとインクリメンタルバックアップを適宜取得してリカバリを行う方法も可能になります。
</p>

<p>
アーカイブログを使う場合、postgresqlのリカバリはかなり速いとはいえ、それまでに実行されたトランザクションを全て再実行するのでそれなりに時間がかかります。
一方、インクリメンタルバックアップはバックアップデータをファイルレベルで更新するだけなので、アーカイブログによるリストアと比較すると早い実行が期待できます。
</p>

<p>
しかし、アーカイブログが不要になるわけでありません。
直近のインクリメンタルバックアップ以降の変更を反映させるには、アーカイブログが必要になります。
</p>

%SECTION [1] postgresql.confの設定

<p>
summarize_walオプションは必須です。
</p>

<br>

<pre>
summarize_wal = on

# 直近のインクリメンタルバックアップ以降の変更をリストアに反映させるため。
archive_mode = on
archive_command = '/bin/cp %p /home/postgres/archivelogs/%f'
</pre>


%SECTION [2] Fullbackup

<p>
最初はフルバックアップが必要です。
</p>

<pre>
$ ./bin/pg_basebackup --checkpoint=fast -D /usr/local/pgsql/incremental_backup/full \
> -X stream -P -v --no-slot
</pre>

<p>
バージョン17の時点では、pg_basebackupの圧縮機能を使っても、リストアする際にさまざまな手間(base.tar.gzを展開する、pg_wal.tar.gzをpg_wal以下で展開する、展開後はtar.gzファイルを削除しなければならない)がかかります。
よって、
<u>
pg_basebackupでは通常のファイルでバックアップし、後から手動で圧縮することをお勧めします。
</u>
</p>

<p>
また、-Rオプションなどでオリジナルのデータベースクラスタに存在しないファイルを生成すると、manifestファイルとの不一致で、あとで示すverificationに失敗する場合があります。
よって、
<u>
一般にインクリメンタルバックアップを行う場合には、manifestファイルに存在しないファイルを作成しないように注意する必要があります。
</u>
</p>

<br>

%SECTION [3] インクリメンタルバックアップ

<p>
インクリメンタルバックアップは、--incrementalオプションに直前のバックアップのbackup_manifestを設定することで行います。
</p>

<p>
初回のインクリメンタルバックアップは、--incrementalオプションにフルバックアップのbackaup_manifestを設定します。
</p>

<pre>
$ ./bin/pg_basebackup --checkpoint=fast --incremental /usr/local/pgsql/incremental_backup/full/backup_manifest \
> -D /usr/local/pgsql/incremental_backup/inc01 -X stream -P -v --no-slot
pg_basebackup: initiating base backup, waiting for checkpoint to complete
pg_basebackup: checkpoint completed
pg_basebackup: write-ahead log start point: 0/1C000028 on timeline 1
pg_basebackup: starting background WAL receiver
 5070/42472 kB (100%), 1/1 tablespace
pg_basebackup: write-ahead log end point: 0/1C000120
pg_basebackup: waiting for background process to finish streaming ...
pg_basebackup: syncing data to disk ...
pg_basebackup: renaming backup_manifest.tmp to backup_manifest
pg_basebackup: base backup completed
</pre>

<p>
２回目のインクリメンタルバックアップは、--incrementalオプションに1回目のインクリメンタルバックアップのbackaup_manifestを設定します。
</p>

<pre>
$ ./bin/pg_basebackup --checkpoint=fast --incremental /usr/local/pgsql/incremental_backup/inc01/backup_manifest \
> -D /usr/local/pgsql/incremental_backup/inc02 -X stream -P -v --no-slot
pg_basebackup: initiating base backup, waiting for checkpoint to complete
pg_basebackup: checkpoint completed
pg_basebackup: write-ahead log start point: 0/1E000028 on timeline 1
pg_basebackup: starting background WAL receiver
 5070/42472 kB (100%), 1/1 tablespace
pg_basebackup: write-ahead log end point: 0/1E000120
pg_basebackup: waiting for background process to finish streaming ...
pg_basebackup: syncing data to disk ...
pg_basebackup: renaming backup_manifest.tmp to backup_manifest
pg_basebackup: base backup completed
</pre>


<br>

%SECTION [4] リカバリ準備

<p>
インクリメンタルバックアップからリカバリするには、
事前に
<a href="https://www.postgresql.org/docs/current/app-pgcombinebackup.html" target="_blank" rel="noopener noreferrer">pg_combinebackup</a>コマンドで、バックアップを構築します。
</p>

<p>
はじめにドライランで動作確認を行います。
</p>

<pre>
$ ./bin/pg_combinebackup -d -n -o /usr/local/pgsql/restored  \
> /usr/local/pgsql/incremental_backup/full/  \
> /usr/local/pgsql/incremental_backup/inc01/ \
> /usr/local/pgsql/incremental_backup/inc02
</pre>

<p>
問題がなければリストア用のデータベースクラスタを作成します。
</p>

<pre>
$ ./bin/pg_combinebackup -o /usr/local/pgsql/restored  \
> /usr/local/pgsql/incremental_backup/full/  \
> /usr/local/pgsql/incremental_backup/inc01/ \
> /usr/local/pgsql/incremental_backup/inc02
</pre>

<p>
<a href="https://www.postgresql.org/docs/current/app-pgverifybackup.html" target="_blank" rel="noopener noreferrer">pg_verifybackup</a>コマンドで
作成したデータベースクラスタを検証します。
</p>

<pre>
$ ./bin/pg_verifybackup  -P --progress /usr/local/pgsql/restored/
41797/41797 kB (100%) verified
backup successfully verified
</pre>

%SECTION [5] リカバリ

<p>
適宜、~/restored/postgresql.confを修正して、recovery.signalファイルを生成し、リカバリを開始します。
</p>


<pre>
$ touch restored/recovery.signal
$ ./bin/pg_ctl -D restored start
</pre>

