%FILE internal/admin-18.html
%LASTMOD
%KEY pgsql-admin18

%TITLE パラメータチューニング

<p>
PostgreSQLに限らず、RDBMSに共通する不変のチューニング原則は次の２点でしょう。
<ol>
<li>メモリのキャッシュ効果を最大限に利用する</li>
<li>CHECKPOINTや(PostgreSQL特有だが)VACUUMなど、HDDへの書き込み集中による性能低下を避ける</li>
</ol>
</p>

<p>
元来、PostgreSQLは運用において調整すべき設定パラメータは少数です。
さらにバージョン8.1以降はAUTOVACUUMやバックグランドライタなどのサブプロセスによって、
HDDへの書き込みを分散できます。これによってチューニングが非常に容易になりました。
</p>

<p>
以下、幾つかのパラメータについて設定基準を述べます。
詳しくは<a href="./admin-14.html">[<3-14>]</a>で紹介した文献、特に「PostgreSQLのチューニング技法」を参照してください。
</p>

%CHAPTER  seq_page_cost と random_page_cost

<p>
seq_page_cost と random_page_costのデフォルトはそれぞれ1.0と4.0ですが、これはHDDを前提とした値です。
現在はSSDが主流なのでrandom_page_costも1.0に変更すべきです。
</p>

%CHAPTER Auto Vacuum

<p>
PostgreSQLの基本性能が向上するにつれて、VACUUMが性能の足をひっぱることも多くなってきています。
<a href="https://www.interdb.jp/blog/pgsql/autovacuum1/" target="_blank" rel="noopener noreferrer">Autovacuum tip</a>などを参考にAutoVacuumのチューニングを行うとよいでしょう。
</p>

<br>

%CHAPTER メモリ

<p>
shared_buffers, work_memをメモリ量に応じて設定します。
<br>
以下、設定値の目安を解説します。
</p>

%SECTION shared_buffers

<p>
メモリのキャッシュ効果を活かすにはshared_buffersに大きなサイズを設定するだけでよいと思えますが、
カーネルのページキャッシュ機能(ファイルシステムキャッシュという場合もある)と、
PostgreSQLのバッファマネージャによるキャッシュ機能が重複するので、話はそれほど簡単でありません。
</p>

<table border=1>
<caption>[<図3-04>]共有バッファとOSのメモリ管理</caption>
<tr><td>
<img src="./fig-3-04.png" width=700><br>
</td></tr></table>

<br>

<p>
shared_buffersに大きな値、例えば実メモリの50%を割り当てた場合、キャッシュするデータがほとんど重複してしまい、メモリの利用効率が悪くなります。
<br>
shared_buffersにさらに大きな値、例えば実メモリの80%を割り当てた場合、他のプロセスやPostgreSQLのpostgresプロセスのメモリ領域を圧迫し、スワップが発生する可能性があります。
<br>
メモリ関係の設定パラメータ、たとえばwork_memやmaintenance_work_memが比較的大きく、
さらにいくつかのpostgresプロセスが複雑なSQL処理で一時テーブル領域を要求すると、スワップが発生する場合があります。
RDBMSの稼働中にスワップが発生したら、それは悲劇です。
</p>


<p>
shared_buffersの経験則として「実メモリの20〜30%程度、もしくは頻繁にアクセスするテーブルのデータがshared_buffersに載る程度」といわれています。
<br>
実際は実データを使ったベンチマークと、運用中の接続数から他のpostgresプロセスが必要とするメモリ領域を勘案し、
絶対にスワップが発生しないようにshared_buffersを選ぶべきです。
</p>

<p>
現状の設定値が妥当かどうかは、
データベース毎の稼働状況のキャッシュヒット率から判断できます。
</p>


%SECTION work_mem

<p>
work_memのサイズは大きいほうがよいですが、postgresプロセスが多くなるとメモリ領域を圧迫して、スワップが発生する可能性があります。よって、最大でも(実メモリ - shared_buffers)/max_connections 以下でなければなりません。
</p>

<p>
バージョン8.3以降なら、
設定パラメータlog_temp_filesに適切な値を設定することで、work_mem内で処理できずに一時ファイルを使ったときのログを書き出せます。
しばらく運用を続ければ、実際の運用で必要なwork_memの最大値を知ることができます。
<br>
実メモリに余裕があり、且つ一時ファイルが頻繁に使われているのならば、上限を越えない範囲でwork_memの値を増やしてください。
</p>


%CHAPTER CHECKPOINT

<p>
checkpoint_segmentsとcheckpoint_completion_targetに大きな値を設定すると、CHECKPOINT時の性能低下を避けることができます。
</p>

%SECTION checkpoint_segments

<p>
デフォルト値3の場合、大量のデータを挿入したり更新していると、CHECKPOINTが頻発してしまいます。
<br>
実行ログに以下のようなメッセージが頻出するようならば、
checkpoint_segmentsに大きな値を設定するとよいでしょう。
</p>

<pre>
LOG: checkpoints are occurring too frequently (36 seconds apart)
HINT: Consider increasing the configuration parameter "checkpoint_segments".
</pre>
<br>


%SECTION checkpoint_completion_target

<p>
バージョン8.3以降なら、checkpoint_completion_targetに0.8〜0.9など大きめの値を設定して、CHECKPOINTの負荷を分散できます。
</p>

<p>
バージョン9.1から、contribに同期書き込みの方式別ベンチマークを行うツールpg_test_fsyncがサポートされました。
このツールを使って適切な同期方法wal_sync_methodを選択するとよいでしょう。
</p>
